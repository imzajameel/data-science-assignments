{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f68b476d-19e8-499e-b2fd-a52555134ec9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#MongoDB Assignment\n",
    "#Question.1 What is MongoDB? Explain non-relational databases in short. In which scenarios it is preferred to use\n",
    "#MongoDB over SQL databases?\n",
    "#Answer.1 MongoDB is a popular open-source, document-oriented NoSQL database that falls under the category of non-relational\n",
    "#databases. It is designed to store and manage data in a flexible, schema-less manner, making it well-suited for handling \n",
    "#unstructured or semi-structured data.\n",
    "\n",
    "#Non-relational databases, also known as NoSQL databases, differ from traditional SQL (relational) databases in their data \n",
    "#storage and retrieval approach. Here are some key characteristics of non-relational databases:\n",
    "\n",
    "#Flexible Schema: Unlike SQL databases, which require a fixed schema before data can be inserted, NoSQL databases allow each\n",
    "#document (record) in a collection (table) to have a different structure. This flexibility enables handling evolving data and \n",
    "#dynamic requirements more effectively.\n",
    "\n",
    "#Horizontal Scalability: NoSQL databases are designed to scale horizontally, distributing data across multiple nodes or \n",
    "#servers. This approach allows them to handle massive amounts of data and high traffic, making them suitable for modern web \n",
    "#and cloud applications.\n",
    "\n",
    "#High Performance: NoSQL databases typically offer fast read and write operations due to their optimized data storage \n",
    "#structures and simplified querying mechanisms.\n",
    "\n",
    "#Variety of Data Models: NoSQL databases come in different data models, including document-based (e.g., MongoDB), \n",
    "#key-value (e.g., Redis), column-family (e.g., Cassandra), and graph-based (e.g., Neo4j). Each data model is suited for\n",
    "#specific use cases and data structures.\n",
    "\n",
    "#Eventual Consistency: In some NoSQL databases, the consistency model may be \"eventual consistency,\" which means that data\n",
    "#changes propagate through the system and eventually become consistent across all nodes. This approach prioritizes \n",
    "#availability and partition tolerance over immediate consistency.\n",
    "\n",
    "#When to use MongoDB over SQL databases:\n",
    "\n",
    "#Flexible Data Model: MongoDB is preferred when dealing with unstructured or rapidly changing data. If your application\n",
    "#requires handling diverse data types and evolving schemas, MongoDB's flexible document-based model is a better fit.\n",
    "\n",
    "#Scalability: MongoDB excels at horizontal scalability, making it suitable for applications with ever-growing datasets and \n",
    "#high read/write throughput requirements. It can distribute data across multiple servers, providing better performance and \n",
    "#handling large-scale applications.\n",
    "\n",
    "#Real-time Analytics and IoT: MongoDB is commonly used in scenarios involving real-time data processing, analytics, and \n",
    "#Internet of Things (IoT) applications due to its ability to handle massive data streams.\n",
    "\n",
    "#Agile Development: MongoDB's schema-less nature allows for agile development, as changes to the data structure do not \n",
    "#require extensive schema migrations, reducing development complexities and iteration time.\n",
    "\n",
    "#Cloud and Web Applications: MongoDB is popular in cloud and web-based applications, where the flexible data model and \n",
    "#horizontal scalability are advantageous for handling user-generated content, social interactions, and other dynamic data.\n",
    "\n",
    "#It's important to note that the choice between MongoDB and SQL databases depends on specific project requirements, data \n",
    "#structure, scalability needs, and the development team's familiarity with the database technology. Each database type has\n",
    "#its strengths and is best suited for particular use cases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "01947625-d3a6-4a84-aab4-6c43974cd855",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.2 State and Explain the features of MongoDB.\n",
    "#Answer.2  MongoDB is a popular NoSQL (non-relational) database that offers several features that make it a flexible\n",
    "#and powerful choice for various application scenarios. Here are some key features of MongoDB:\n",
    "\n",
    "#Document-Oriented:\n",
    "#MongoDB stores data in BSON (Binary JSON) documents, which are similar to JSON (JavaScript Object Notation) objects.\n",
    "#Each document can have a different structure, and fields can vary between documents. This flexible schema allows MongoDB \n",
    "#to handle semi-structured and unstructured data more efficiently.\n",
    "\n",
    "#Scalability:\n",
    "#MongoDB is designed to scale horizontally by distributing data across multiple nodes or servers. It supports automatic \n",
    "#sharding, allowing it to handle large datasets and high traffic by balancing the workload across different nodes. This\n",
    "#horizontal scalability makes MongoDB well-suited for large-scale applications.\n",
    "\n",
    "#High Performance:\n",
    "#MongoDB offers fast read and write operations due to its optimized data storage format (BSON), in-memory processing, and \n",
    "#built-in caching. It also supports various indexing techniques, enhancing query performance.\n",
    "\n",
    "#Replication and High Availability:\n",
    "#MongoDB provides built-in replication, allowing data to be replicated across multiple servers to ensure data redundancy \n",
    "#and fault tolerance. This replication setup provides high availability, as if one server fails, another can take over.\n",
    "\n",
    "#Flexible Query Language:\n",
    "#MongoDB supports a rich query language that allows for complex queries, including filtering, sorting, aggregation, and \n",
    "#geospatial queries. It also supports secondary indexes for faster query access.\n",
    "\n",
    "#Horizontal Partitioning (Sharding):\n",
    "#MongoDB can partition data across multiple servers using sharding, enabling it to distribute data based on specific criteria\n",
    "#and improve performance and data management.\n",
    "\n",
    "#Geospatial Indexing:\n",
    "#MongoDB provides support for geospatial data and geospatial indexing, making it a preferred choice for location-based \n",
    "#applications and services.\n",
    "\n",
    "#Ad Hoc Queries:\n",
    "#MongoDB allows for ad hoc queries, meaning you can query data without the need to pre-define the schema or create elaborate\n",
    "#joins. This provides greater flexibility and agility in development.\n",
    "\n",
    "#JSON-Like Data Format:\n",
    "#Data stored in MongoDB is represented in a JSON-like format, which is intuitive and easy for developers to work with.\n",
    "\n",
    "#Flexible Data Model:\n",
    "#MongoDB's document-based data model allows for easy representation of complex hierarchical relationships and nested data \n",
    "#structures, making it suitable for handling real-world data.\n",
    "\n",
    "#Easy Integration with Modern Technologies:\n",
    "#MongoDB integrates seamlessly with modern technologies and frameworks, including Node.js, Python, and various cloud \n",
    "#platforms, making it a popular choice for web and cloud-based applications.\n",
    "\n",
    "#MongoDB's combination of flexibility, scalability, performance, and ease of use has made it a widely adopted NoSQL database\n",
    "#in various industries, from startups to large enterprises, and in a range of applications, including web applications,\n",
    "#content management systems, analytics platforms, and mobile applications."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3236842c-6589-4521-b90e-408ad518397d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.3 Write a code to connect MongoDB to Python. Also, create a database and a collection in MongoDB.\n",
    "#Answer.3 : \n",
    "#import pymongo\n",
    "\n",
    "#connection_string = \"mongodb://myuser:mydatabase4@cluster0-shard-00-00.mongodb.net:27017,cluster0-shard-00-01.mongodb.net:27017,cluster0-shard-00-02.mongodb.net:27017/my_database?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin\"\n",
    "\n",
    "#client = pymongo.MongoClient(connection_string)\n",
    "#db = client[\"my_database\"]\n",
    "#collection = db[\"my_collection\"]\n",
    "\n",
    "#data_to_insert = [\n",
    "    #{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"},\n",
    "    #{\"name\": \"Jane\", \"age\": 25, \"city\": \"San Francisco\"},\n",
    "    #{\"name\": \"Mike\", \"age\": 35, \"city\": \"Chicago\"}\n",
    "#]\n",
    "\n",
    "#collection.insert_many(data_to_insert)\n",
    "\n",
    "#client.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "39a06efd-65f0-40f8-86ea-20941f9ebf10",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.4 Using the database and the collection created in question number 3, write a code to insert one record,and \n",
    "#insert many records. Use the find() and find_one() methods to print the inserted record.\n",
    "#Answer.4 : \n",
    "\n",
    "#import pymongo\n",
    "\n",
    "#connection_string = \"mongodb://myuser:mydatabase@cluster0-shard-00-00.mongodb.net:27017,cluster0-shard-00-01.mongodb.net:27017,cluster0-shard-00-02.mongodb.net:27017/my_database?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin\"\n",
    "\n",
    "#client = pymongo.MongoClient(connection_string)\n",
    "#db = client[\"my_database\"]\n",
    "#collection = db[\"my_collection\"]\n",
    "\n",
    "#record_to_insert = {\"name\": \"Alice\", \"age\": 28, \"city\": \"Los Angeles\"}\n",
    "#collection.insert_one(record_to_insert)\n",
    "\n",
    "#data_to_insert = [\n",
    "    #{\"name\": \"Bob\", \"age\": 24, \"city\": \"Chicago\"},\n",
    "    #{\"name\": \"Eve\", \"age\": 30, \"city\": \"San Francisco\"},\n",
    "    #{\"name\": \"Sam\", \"age\": 22, \"city\": \"New York\"}\n",
    "#]\n",
    "#collection.insert_many(data_to_insert)\n",
    "\n",
    "#print(\"All records in the collection:\")\n",
    "#for record in collection.find():\n",
    "    #print(record)\n",
    "\n",
    "#print(\"\\nOne record using find_one():\")\n",
    "#collection.find_one()\n",
    "\n",
    "#client.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c72d018c-a327-4a6d-bfd7-e56ad4d30218",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.5 Explain how you can use the find() method to query the MongoDB database. Write a simple code to demonstrate this.\n",
    "#Answer.5 In MongoDB, the find() method is used to query the database and retrieve documents (records) from a collection \n",
    "#based on specific criteria. It allows you to specify a query filter to filter the data you want to retrieve. The find() method\n",
    "#returns a cursor, which is an iterator that can be used to access the retrieved documents one by one.\n",
    "\n",
    "#Syntax of the find() method:\n",
    "#collection.find(query_filter, projection)\n",
    "\n",
    "#query_filter (optional): A dictionary containing the query criteria to filter the data. If not specified, it will return\n",
    "#all documents in the collection.\n",
    "#projection (optional): A dictionary specifying which fields to include or exclude in the returned documents. It allows you \n",
    "#to control the fields that are returned.\n",
    "\n",
    "#Here's a simple Python code demonstrating how to use the find() method to query the MongoDB database: \n",
    "#import pymongo\n",
    "\n",
    "#connection_string = \"mongodb://myuser:mydatabase4@cluster0-shard-00-00.mongodb.net:27017,cluster0-shard-00-01.mongodb.net:27017,cluster0-shard-00-02.mongodb.net:27017/my_database?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin\"\n",
    "#client = pymongo.MongoClient(connection_string)\n",
    "#db = client[\"my_database\"]\n",
    "#collection = db[\"my_collection\"]\n",
    "\n",
    "#data_to_insert = [\n",
    "   # {\"name\": \"John\", \"age\": 30, \"city\": \"New York\"},\n",
    "   # {\"name\": \"Jane\", \"age\": 25, \"city\": \"San Francisco\"},\n",
    "    #{\"name\": \"Mike\", \"age\": 35, \"city\": \"Chicago\"}\n",
    "#]\n",
    "#collection.insert_many(data_to_insert)\n",
    "\n",
    "#all_documents = collection.find()\n",
    "#print(\"All documents in the collection:\")\n",
    "#for document in all_documents:\n",
    "    #print(document)\n",
    "\n",
    "#query_filter = {\"age\": {\"$gt\": 30}}\n",
    "#filtered_documents = collection.find(query_filter)\n",
    "#print(\"\\nFiltered documents (age > 30):\")\n",
    "#for document in filtered_documents:\n",
    "    #print(document)\n",
    "\n",
    "#client.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3903eab-c6a9-4186-a3ec-c4d1be9f3571",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.6 Explain the sort() method. Give an example to demonstrate sorting in MongoDB.\n",
    "#Answer.6  The sort() method in MongoDB is used to sort the result set of a query in ascending or descending \n",
    "#order based on one or more fields in the documents. It allows you to specify the sorting criteria and direction to \n",
    "#retrieve the data in a specific order.\n",
    "\n",
    "#Syntax of the sort() method:\n",
    "#collection.find(query_filter).sort(sort_key, sort_order)\n",
    "#query_filter (optional): A dictionary containing the query criteria to filter the data.\n",
    "#sort_key: The field name or names based on which you want to sort the data. It can be a single field or a list of fields.\n",
    "#sort_order: The sorting order, which can be either pymongo.ASCENDING (1) for ascending order or pymongo.DESCENDING (-1) for\n",
    "#descending order.\n",
    "#Note: If the sort() method is not used, the documents will be retrieved in the order they are stored in the database,\n",
    "#which may not be in any particular order.\n",
    "# code to  demonstrate sorting in MongoDB  : \n",
    "#import pymongo\n",
    "\n",
    "#connection_string = \"mongodb://myuser:mydatabase4@cluster0-shard-00-00.mongodb.net:27017,cluster0-shard-00-01.mongodb.net:27017,cluster0-shard-00-02.mongodb.net:27017/my_database?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin\"\n",
    "#client = pymongo.MongoClient(connection_string)\n",
    "#db = client[\"my_database\"]\n",
    "#collection = db[\"students\"]\n",
    "\n",
    "#query_filter = {}\n",
    "#sort_key = \"score\"\n",
    "#sort_order = pymongo.DESCENDING\n",
    "\n",
    "#sorted_documents = collection.find(query_filter).sort(sort_key, sort_order)\n",
    "\n",
    "#print(\"Sorted documents based on score (descending order):\")\n",
    "#for document in sorted_documents:\n",
    "   # print(document)\n",
    "\n",
    "#client.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8dc24f8-d759-4327-b48e-3e9557f21896",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.7 Explain why delete_one(), delete_many(), and drop() is used.\n",
    "#Answer.7 delete_one():\n",
    "\n",
    "#The delete_one() : \n",
    "#method is used to delete a single document (record) from a collection that matches a specified filter. If\n",
    "#multiple documents match the filter, only the first matching document will be deleted.\n",
    "#This method is useful when you want to remove a specific document from the collection based on a specific condition.\n",
    "#Example : \n",
    "#import pymongo\n",
    "\n",
    "#connection_string =  \"mongodb://myuser:mydatabase4@cluster0-shard-00-00.mongodb.net:27017,cluster0-shard-00-01.mongodb.net:27017,cluster0-shard-00-01.mongodb.net:27017,cluster0-shard-00-02.mongodb.net:27017/my_database?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin\"\n",
    "#client = pymongo.MongoClient(connection_string)\n",
    "#db = client[\"my_database\"]\n",
    "#collection = db[\"students\"]\n",
    "\n",
    "#query_filter = {\"name\": \"John\"}\n",
    "#collection.delete_one(query_filter)\n",
    "\n",
    "#client.close()\n",
    "\n",
    "\n",
    "#delete_many():\n",
    "\n",
    "#The delete_many() method is used to delete multiple documents from a collection that match a specified filter. It can \n",
    "#delete all the documents that match the filter criteria.\n",
    "#This method is useful when you want to remove multiple documents that meet certain criteria from the collection.\n",
    "\n",
    "#Example :\n",
    "#import pymongo\n",
    "\n",
    "#connection_string = \"mongodb://myuser:mydatabase4@cluster0-shard-00-00.mongodb.net:27017,cluster0-shard-00-01.mongodb.net:27017,cluster0-shard-00-01.mongodb.net:27017,cluster0-shard-00-02.mongodb.net:27017/my_database?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin\"\n",
    "#client = pymongo.MongoClient(connection_string)\n",
    "#db = client[\"my_database\"]\n",
    "#collection = db[\"students\"]\n",
    "\n",
    "#query_filter = {\"score\": {\"$lt\": 80}}\n",
    "#collection.delete_many(query_filter)\n",
    "\n",
    "#client.close()\n",
    "\n",
    "\n",
    "#drop():\n",
    "\n",
    "#The drop() method is used to delete an entire collection from the database. It completely removes the collection and all \n",
    "#of its documents.\n",
    "#This method is useful when you want to delete the entire collection, perhaps when it is no longer needed or when you want\n",
    "#to start fresh with an empty collection.\n",
    "\n",
    "#Example : \n",
    "#import pymongo\n",
    "\n",
    "#connection_string = \"mongodb://myuser:mydatabase4@cluster0-shard-00-00.mongodb.net:27017,cluster0-shard-00-01.mongodb.net:27017,cluster0-shard-00-01.mongodb.net:27017,cluster0-shard-00-02.mongodb.net:27017/my_database?ssl=true&replicaSet=Cluster0-shard-0&authSource=admin\"\n",
    "#client = pymongo.MongoClient(connection_string)\n",
    "#db = client[\"my_database\"]\n",
    "#collection = db[\"students\"]\n",
    "\n",
    "#collection.drop()\n",
    "\n",
    "#client.close()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
