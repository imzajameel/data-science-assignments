{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "6cef0fdf-5f0b-4c3d-8b24-6f0853d8b551",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dog barks\n",
      "Dog runs\n",
      "Cat meows\n",
      "Cat jumps\n"
     ]
    }
   ],
   "source": [
    "#Question.1 What is Abstraction in OOps ? Explain with an example .\n",
    "#Answer.1 In object-oriented programming (OOP), abstraction is a concept that allows you to represent complex real-world \n",
    "#entities as simplified models within your code. It involves hiding the unnecessary details and exposing only the\n",
    "#essential features or behaviors of an object. Abstraction helps in reducing complexity, improving code maintainability, \n",
    "#and promoting reusability.\n",
    "#Analogy : we all use the social platforms and contact our friends, chat, share images etc., but we donâ€™t know how \n",
    "#these operations are happening in the background. Let us take another example, while visiting and reading blogs on the\n",
    "#GreatLearning we tend to click on various links and perform various functions unknowingly what is happening in the\n",
    "#background. That is exactly the abstraction that works in the OOP.\n",
    "\n",
    "#.Python provides the abc module to use the abstraction in the Python program.\n",
    "#Example : \n",
    "from abc import ABC, abstractmethod\n",
    "class Animal(ABC):\n",
    "    @abstractmethod\n",
    "    def sound(self):\n",
    "        pass\n",
    "\n",
    "    @abstractmethod\n",
    "    def move(self):\n",
    "        pass\n",
    "\n",
    "class Dog(Animal):\n",
    "    def sound(self):\n",
    "        print(\"Dog barks\")\n",
    "\n",
    "    def move(self):\n",
    "        print(\"Dog runs\")\n",
    "\n",
    "class Cat(Animal):\n",
    "    def sound(self):\n",
    "        print(\"Cat meows\")\n",
    "\n",
    "    def move(self):\n",
    "        print(\"Cat jumps\")\n",
    "\n",
    "# Creating objects of the Dog and Cat classes\n",
    "dog = Dog()\n",
    "cat = Cat()\n",
    "\n",
    "dog.sound()  # Output: Dog barks\n",
    "dog.move()   # Output: Dog runs\n",
    "\n",
    "cat.sound()  # Output: Cat meows\n",
    "cat.move()   # Output: Cat jumps\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "078e7280-e762-4753-b917-4f9127c3f080",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Bank Account Balance: 6000\n",
      "Savings Account Balance: 13000\n",
      "Interest earned on Savings Account over 2 years: 1300.0\n"
     ]
    }
   ],
   "source": [
    "#Question.2 Differentiate between Abstraction and Encapsulation.Explain with an example.\n",
    "#Answer.2 Abstraction and encapsulation are two fundamental concepts in object-oriented programming (OOP), but they \n",
    "#serve different purposes:\n",
    "\n",
    "#Abstraction:\n",
    "\n",
    "#Abstraction focuses on representing complex real-world entities as simplified models within the code.\n",
    "#It involves hiding unnecessary details and exposing only the essential features or behaviors of an object.\n",
    "#Abstraction is achieved through abstract classes, interfaces, and defining common interfaces for related classes.\n",
    "#It helps in reducing complexity, improving code maintainability, and promoting reusability.\n",
    "\n",
    "#Encapsulation:\n",
    "\n",
    "#Encapsulation focuses on bundling data and methods together within a class, and restricting direct access to the \n",
    "#internal data from outside the class.\n",
    "#It provides a way to protect data from external interference. \n",
    "#It ensures that it can only be accessed through defined methods (getters and setters).\n",
    "#Encapsulation helps in achieving data hiding,data protection, and code organization. \n",
    "\n",
    "#Example : \n",
    "class BankAccount:\n",
    "    def __init__(self, account_number, balance):\n",
    "        self._account_number = account_number\n",
    "        self._balance = balance\n",
    "\n",
    "    def deposit(self, amount):\n",
    "        self._balance += amount\n",
    "\n",
    "    def withdraw(self, amount):\n",
    "        if amount <= self._balance:\n",
    "            self._balance -= amount\n",
    "        else:\n",
    "            print(\"Insufficient balance.\")\n",
    "\n",
    "    def get_account_number(self):\n",
    "        return self._account_number\n",
    "\n",
    "    def get_balance(self):\n",
    "        return self._balance\n",
    "\n",
    "\n",
    "class SavingsAccount(BankAccount):\n",
    "    def __init__(self, account_number, balance, interest_rate):\n",
    "        super().__init__(account_number, balance)\n",
    "        self._interest_rate = interest_rate\n",
    "\n",
    "    def calculate_interest(self, time):\n",
    "        interest = self._balance * self._interest_rate * time\n",
    "        return round(interest, 2)\n",
    "\n",
    "\n",
    "# Creating objects of the BankAccount and SavingsAccount classes\n",
    "bank_account = BankAccount(\"1234567890\", 5000)\n",
    "savings_account = SavingsAccount(\"9876543210\", 10000, 0.05)\n",
    "\n",
    "bank_account.deposit(2000)\n",
    "bank_account.withdraw(1000)\n",
    "\n",
    "savings_account.deposit(5000)\n",
    "savings_account.withdraw(2000)\n",
    "\n",
    "bank_account_balance = bank_account.get_balance()\n",
    "print(\"Bank Account Balance:\", bank_account_balance)\n",
    "\n",
    "savings_account_balance = savings_account.get_balance()\n",
    "print(\"Savings Account Balance:\", savings_account_balance)\n",
    "\n",
    "years = 2\n",
    "interest = savings_account.calculate_interest(years)\n",
    "print(f\"Interest earned on Savings Account over {years} years:\", interest)\n",
    "\n",
    "#In this example, we have a BankAccount class that represents a general bank account. It encapsulates the account number\n",
    "#and balance as private attributes (_account_number and _balance) and provides methods to interact with the account, \n",
    "#such as deposit() and withdraw(). The encapsulation is achieved by making the attributes private and accessing them \n",
    "#through getter methods (get_account_number() and get_balance()).The SavingsAccount class inherits from the BankAccount \n",
    "#class and represents a specialized type of bank account with an added feature of interest calculation \n",
    "#(calculate_interest()). It demonstrates abstraction by extending the base class and providing its own implementation \n",
    "#for the interest calculation. The base class BankAccount acts as an abstraction of a generic bank account,\n",
    "#while the SavingsAccount class refines and adds specific behavior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b449ad85-0b66-4342-b6da-aef3e7cd47f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.3 What is abc module in python ? why is it used ? \n",
    "#Answer.3 The abc module in Python stands for \"Abstract Base Classes.\" It provides infrastructure for defining abstract\n",
    "#base classes (ABCs) in Python.Abstract base classes are classes that cannot be instantiated but serve as a blueprint \n",
    "#for other classes. They define a common interface or set of methods that the derived classes must implement. ABCs allow \n",
    "#you to define abstract methods, properties, and class-level attributes that must be implemented by the subclasses.\n",
    "#The abc module provides the ABC class and the abstractmethod decorator, which are used as tools for defining abstract\n",
    "#base classes and abstract methods, respectively.\n",
    "\n",
    "#By using the abc module and creating abstract base classes, you can:\n",
    "\n",
    "#Define a common interface: Abstract base classes allow you to define a common set of methods or attributes that\n",
    "#derived classes must implement, ensuring consistency and interoperability.\n",
    "\n",
    "#Encourage code reusability: Abstract base classes provide a way to share common functionality or behaviors among\n",
    "#multiple classes, promoting code reuse and reducing duplication.\n",
    "\n",
    "#Enforce contract and validation: By defining abstract methods or properties in an abstract base class, you can enforce\n",
    "#that the derived classes implement them, providing a contract that guarantees specific functionality or behavior.\n",
    "\n",
    "#Enable polymorphism: Abstract base classes enable polymorphism by allowing you to treat instances of derived classes \n",
    "#as instances of the abstract base class, providing a level of abstraction and flexibility in designing your code.\n",
    "\n",
    "#Overall, the abc module is used to create abstract base classes, define abstract methods, and enforce a common \n",
    "#interface or behavior among derived classes. It helps in designing and structuring object-oriented programs in a more\n",
    "#modular, reusable, and maintainable manner."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "214d699c-77d8-491e-9577-f2fe7958f7aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mileage is 30kmph\n",
      "The mileage is 27kmph \n",
      "The mileage is 25kmph \n",
      "The mileage is 24kmph \n"
     ]
    }
   ],
   "source": [
    "#Question.4 How can we achieve data abstraction ? \n",
    "#Answer.4 In Python, abstraction can be achieved by using abstract classes and interfaces.\n",
    "#Python provides the abc module to use the abstraction in the Python program. Let's see the following syntax.\n",
    "\n",
    "#Syntax :\n",
    "\n",
    "#from abc import ABC  \n",
    "#class ClassName(ABC):\n",
    "    \n",
    "#We import the ABC class from the abc module.\n",
    "\n",
    "#In python ,we need to import the abc module, which provides the base for defining Abstract Base classes (ABC). \n",
    "#The ABC works by decorating methods of the base class as abstract. It registers concrete classes as the implementation\n",
    "#of the abstract base. We use the @abstractmethod decorator to define an abstract method \n",
    "\n",
    "#Example :\n",
    "\n",
    "from abc import ABC, abstractmethod   \n",
    "class Car(ABC):   \n",
    "    def mileage(self):   \n",
    "        pass  \n",
    "class Tesla(Car):   \n",
    "    def mileage(self):   \n",
    "        print(\"The mileage is 30kmph\")   \n",
    "class Suzuki(Car):   \n",
    "    def mileage(self):   \n",
    "        print(\"The mileage is 25kmph \")   \n",
    "class Duster(Car):   \n",
    "     def mileage(self):   \n",
    "            print(\"The mileage is 24kmph \")   \n",
    "class Renault(Car):   \n",
    "    def mileage(self):   \n",
    "            print(\"The mileage is 27kmph \")   \n",
    "# Driver code   \n",
    "t= Tesla ()   \n",
    "t.mileage()   \n",
    "  \n",
    "r = Renault()   \n",
    "r.mileage()   \n",
    "  \n",
    "s = Suzuki()   \n",
    "s.mileage()   \n",
    "d = Duster()   \n",
    "d.mileage()  \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "140cedb8-e5ea-4d05-8040-5ab7c1e9c267",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.5 Can we create an instance of an abstract class ? Explain your answer\n",
    "#Answer.5 No, we can not create an instance of an abstract class.\n",
    "\n",
    "#Abstract classes are not complete, as they may have some methods that are not defined. So we cannot create an \n",
    "#instance or object of an abstract class in Python.\n",
    "#Example : \n",
    "from abc import ABC, abstractmethod\n",
    "\n",
    "class AbstractClass(ABC):\n",
    "    @abstractmethod\n",
    "    def abstract_method(self):\n",
    "        pass\n",
    "\n",
    "class ConcreteClass(AbstractClass):\n",
    "    def abstract_method(self):\n",
    "        print(\"Implementation of abstract method\")\n",
    "#instance = AbstractClass() #This will throw type error\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3730581f-2896-4441-8918-304325bb92a6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
