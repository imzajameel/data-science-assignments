{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0b55f113-d5cd-4214-9f16-1f63ebe95e5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0     4\n",
      "1     8\n",
      "2    15\n",
      "3    16\n",
      "4    23\n",
      "5    42\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Pandas assignment.1 \n",
    "#Question.1 Create a Pandas Series that contains the following data: 4, 8, 15, 16, 23, and 42.\n",
    "#Then, print the series.\n",
    "#Answer.1 : \n",
    "import pandas as pd\n",
    "\n",
    "# Creating the Pandas Series\n",
    "data = [4, 8, 15, 16, 23, 42]\n",
    "series = pd.Series(data)\n",
    "\n",
    "# Printing the Series\n",
    "print(series)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "49b9b165-fc6c-4c89-b767-f1d139db5bd9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0     1\n",
      "1     2\n",
      "2     3\n",
      "3     4\n",
      "4     5\n",
      "5     6\n",
      "6     7\n",
      "7     8\n",
      "8     9\n",
      "9    10\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Question.2 Create a variable of list type containing 10 elements in it, and apply pandas.Series function on the\n",
    "#variable print it.\n",
    "#Answer.2 : \n",
    "import pandas as pd\n",
    "\n",
    "# Creating a list variable with 10 elements\n",
    "my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
    "\n",
    "# Converting the list into a Pandas Series\n",
    "series = pd.Series(my_list)\n",
    "\n",
    "# Printing the Series\n",
    "print(series)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "29920e5a-205f-4783-b7ac-08cb72d99ea7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Name  Age  Gender\n",
      "0   Alice   25  Female\n",
      "1     Bob   30    Male\n",
      "2  Claire   27  Female\n"
     ]
    }
   ],
   "source": [
    "#Question.3 Create a Pandas DataFrame that contains the following data:\n",
    "#Name        Age    Gender\n",
    "#Alice       25     Female\n",
    "#Bob         30     Male\n",
    "#Claire      27     Female\n",
    "\n",
    "#Then, print the DataFrame.\n",
    "\n",
    "#Answer.3 :\n",
    "import pandas as pd\n",
    "\n",
    "# Create a dictionary with the data\n",
    "data = {\n",
    "    'Name': ['Alice', 'Bob', 'Claire'],\n",
    "    'Age': [25, 30, 27],\n",
    "    'Gender': ['Female', 'Male', 'Female']\n",
    "}\n",
    "\n",
    "# Create the Pandas DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Print the DataFrame\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9e4a1ffd-c645-490d-9ae2-7bc33c5fb965",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame:\n",
      "     Name  Age  Gender\n",
      "0   Alice   25  Female\n",
      "1     Bob   30    Male\n",
      "2  Claire   27  Female\n",
      "\n",
      "Series:\n",
      "0    25\n",
      "1    30\n",
      "2    27\n",
      "Name: Age, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Qustion.4 What is ‘DataFrame’ in pandas and how is it different from pandas.series? Explain with an example.\n",
    "#Answer.4 In Pandas, a DataFrame is a two-dimensional data structure that represents data in a tabular format, similar\n",
    "#to a spreadsheet or SQL table. It consists of rows and columns, where each column can have a different data type.\n",
    "#DataFrames are one of the core data structures provided by Pandas and are widely used for data manipulation, analysis,\n",
    "#and cleaning.\n",
    "\n",
    "#On the other hand, a Pandas Series is a one-dimensional array-like object that can hold data of any type\n",
    "#(e.g., integers, strings, floats). It is similar to a Python list or a NumPy array but comes with additional \n",
    "#functionality and methods provided by Pandas.\n",
    "\n",
    "#Differences between DataFrame and Series:\n",
    "\n",
    "#Dimensionality:\n",
    "\n",
    "#DataFrame: A DataFrame is a two-dimensional data structure with both rows and columns.\n",
    "#Series: A Series is a one-dimensional data structure representing a single column of data.\n",
    "#Data Structure:\n",
    "\n",
    "#DataFrame: A DataFrame is a collection of multiple Series, where each Series represents a column of the DataFrame.\n",
    "#Series: A Series is a single column of data, containing multiple elements of the same data type.\n",
    "#Indexing:\n",
    "\n",
    "#DataFrame: A DataFrame has both row and column indexes. Rows are identified by their index labels, and columns\n",
    "#are identified by their column names.\n",
    "#Series: A Series has only one index, representing the row labels for each element in the Series.\n",
    "#Example:\n",
    "\n",
    "#Let's create an example to illustrate the difference between DataFrame and Series:\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Data for creating a DataFrame\n",
    "data = {\n",
    "    'Name': ['Alice', 'Bob', 'Claire'],\n",
    "    'Age': [25, 30, 27],\n",
    "    'Gender': ['Female', 'Male', 'Female']\n",
    "}\n",
    "\n",
    "# Create a DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Create a Series\n",
    "ages_series = pd.Series([25, 30, 27], name='Age')\n",
    "\n",
    "# Print the DataFrame\n",
    "print(\"DataFrame:\")\n",
    "print(df)\n",
    "\n",
    "# Print the Series\n",
    "print(\"\\nSeries:\")\n",
    "print(ages_series)\n",
    "\n",
    "#In the example, we first create a DataFrame df with three columns: 'Name', 'Age', and 'Gender'. Each \n",
    "#column represents a Pandas Series. Then, we create a Series ages_series representing the 'Age' column from \n",
    "#the DataFrame. \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1d615d7e-da91-4e4d-8620-19cc110ad062",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Product  Quantity\n",
      "0       A     100.0\n",
      "1       B      75.0\n",
      "2       C      50.0\n",
      "3       D      75.0\n"
     ]
    }
   ],
   "source": [
    "#Question.5 What are some common functions you can use to manipulate data in a Pandas DataFrame? Can\n",
    "#you give an example of when you might use one of these functions?\n",
    "#Answer.5 Pandas provides a wide range of functions to manipulate data in a DataFrame. Some common functions include:\n",
    "\n",
    "#head() and tail(): These functions allow you to view the first few rows (head()) or last few rows (tail()) of the\n",
    "#DataFrame. They are often used to get a quick overview of the data.\n",
    "\n",
    "#info(): This function provides a summary of the DataFrame, including the data types, non-null values, and memory usage.\n",
    "#It helps in understanding the structure and size of the DataFrame.\n",
    "\n",
    "#describe(): This function generates descriptive statistics for the numerical columns in the DataFrame, such as count, \n",
    "#mean, standard deviation, min, max, etc.\n",
    "\n",
    "#shape: This attribute returns a tuple representing the dimensions of the DataFrame (rows, columns). It is useful to \n",
    "#get the size of the DataFrame.\n",
    "\n",
    "#loc[] and iloc[]: These are used for label-based and index-based selection of data in the DataFrame, respectively. \n",
    "#They allow you to access specific rows or columns based on their labels or positions.\n",
    "\n",
    "#drop(): This function is used to remove rows or columns from the DataFrame. It helps in filtering out unwanted data.\n",
    "\n",
    "#fillna(): This function is used to replace missing or NaN (Not a Number) values with a specified value or a calculated\n",
    "#value.\n",
    "\n",
    "#groupby(): This function is used to group the data based on one or more columns and perform aggregate operations on the \n",
    "#groups.\n",
    "\n",
    "#merge() and concat(): These functions are used to combine multiple DataFrames either by merging based on common \n",
    "#columns or concatenating them along a specific axis.\n",
    "\n",
    "#apply(): This function is used to apply a function to each element, row, or column of the DataFrame.\n",
    "\n",
    "#Example of using fillna():\n",
    "\n",
    "#Let's say you have a DataFrame containing sales data, and some rows have missing values in the 'Quantity' column.\n",
    "#You want to replace those missing values with the average quantity sold. Here's how you can use fillna():\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Sample sales data with missing values\n",
    "data = {\n",
    "    'Product': ['A', 'B', 'C', 'D'],\n",
    "    'Quantity': [100, None, 50, None]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Calculate the average quantity sold\n",
    "average_quantity = df['Quantity'].mean()\n",
    "\n",
    "# Fill missing values with the average quantity\n",
    "df['Quantity'].fillna(average_quantity, inplace=True)\n",
    "\n",
    "print(df)\n",
    "\n",
    "#In this example, the missing values in the 'Quantity' column are filled with the average quantity (75.0) calculated \n",
    "#using the mean() function. The fillna() function helps in handling missing data and ensures the DataFrame contains\n",
    "#complete information for analysis.\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "366247b1-ffd8-426b-8efd-cd42ac2687c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.6 Which of the following is mutable in nature Series, DataFrame, Panel?\n",
    "#Answer.6 Among the options provided (Series, DataFrame, Panel), the DataFrame is mutable in nature."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c54adcde-e9da-4678-bf01-194e68a377ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.7 Create a DataFrame using multiple Series. Explain with an example.\n",
    "#Answer.7 To create a DataFrame using multiple Series, you can use the pd.DataFrame() constructor, passing a\n",
    "#dictionary where each key represents a column name and the corresponding value is the Series containing the data \n",
    "#for that column. The Series should have the same length to form a valid DataFrame.\n",
    "\n",
    "#Let's create a DataFrame using multiple Series representing student data:\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Create Series for student data\n",
    "names = pd.Series(['Alice', 'Bob', 'Claire', 'David'])\n",
    "ages = pd.Series([25, 30, 27, 22])\n",
    "genders = pd.Series(['Female', 'Male', 'Female', 'Male'])\n",
    "scores = pd.Series([85, 92, 78, 88])\n",
    "\n",
    "# Create DataFrame using multiple Series\n",
    "data = {\n",
    "    'Name': names,\n",
    "    'Age': ages,\n",
    "    'Gender': genders,\n",
    "    'Score': scores\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Print the DataFrame\n",
    "print(df)\n",
    "\n",
    "#In the example, we created four Pandas Series: names, ages, genders, and scores. Each Series represents a column of the \n",
    "#DataFrame. The pd.DataFrame() constructor takes the dictionary data, where each key is a column name ('Name', 'Age', \n",
    "#'Gender', 'Score') and the corresponding value is the respective Series.\n",
    "\n",
    "#The resulting DataFrame contains student data with columns 'Name', 'Age', 'Gender', and 'Score'. Each row represents\n",
    "#a student, and the data from each Series is aligned based on the index. The DataFrame is a tabular representation of the\n",
    "#combined data from multiple Series."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
