{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "4286eb9c-8c19-414f-9bcd-dc8004a9a6c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Unnamed: 0   Name   Age  Score\n",
      "0           0  Alice  25.0   85.0\n",
      "1           1    Bob  30.0    NaN\n",
      "2           2    NaN   NaN   78.0\n",
      "3           3  David  22.0   88.0\n",
      "Name\n",
      "Alice     87.5\n",
      "Bob       89.5\n",
      "Claire    78.0\n",
      "David     88.0\n",
      "Name: Score, dtype: float64\n",
      "     Name  Age\n",
      "0   Alice   25\n",
      "1     Bob   30\n",
      "2  Claire   27\n",
      "    Name        Age      Score\n",
      "0  Alice  25.000000  85.000000\n",
      "1    Bob  30.000000  83.666667\n",
      "2   None  25.666667  78.000000\n",
      "3  David  22.000000  88.000000\n",
      "    ID    Name  Score\n",
      "0  102     Bob     85\n",
      "1  103  Claire     92\n"
     ]
    }
   ],
   "source": [
    "#Pandas advance \n",
    "#Assignment.1 \n",
    "#Question.1 List any five functions of the pandas library with execution.\n",
    "#Answer.1 \n",
    "#1.read_csv(): This function is used to read data from a CSV file and create a DataFrame.\n",
    "#Execution : \n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Read data from a CSV file into a DataFrame\n",
    "df = pd.read_csv('data.csv')\n",
    "\n",
    "print(df)\n",
    "\n",
    "#2.groupby(): This function is used to group data based on one or more columns and perform aggregate operations on the\n",
    "#groups.\n",
    "\n",
    "#Execution : \n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Sample data\n",
    "data = {\n",
    "    'Name': ['Alice', 'Bob', 'Claire', 'David', 'Alice', 'Bob'],\n",
    "    'Age': [25, 30, 27, 22, 24, 29],\n",
    "    'Score': [85, 92, 78, 88, 90, 87]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Group data by 'Name' and calculate the mean score for each person\n",
    "grouped_data = df.groupby('Name')['Score'].mean()\n",
    "\n",
    "print(grouped_data)\n",
    "\n",
    "#3.drop(): This function is used to remove rows or columns from the DataFrame.\n",
    "\n",
    "#Execution : \n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Sample data\n",
    "data = {\n",
    "    'Name': ['Alice', 'Bob', 'Claire'],\n",
    "    'Age': [25, 30, 27],\n",
    "    'Gender': ['Female', 'Male', 'Female']\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Drop the 'Gender' column from the DataFrame\n",
    "df.drop('Gender', axis=1, inplace=True)\n",
    "\n",
    "print(df)\n",
    "\n",
    "#4.fillna(): This function is used to replace missing or NaN (Not a Number) values with a specified value or a calculated \n",
    "#value.\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Sample data with missing values\n",
    "data = {\n",
    "    'Name': ['Alice', 'Bob', None, 'David'],\n",
    "    'Age': [25, 30, None, 22],\n",
    "    'Score': [85, None, 78, 88]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Fill missing values in 'Age' and 'Score' columns with their respective means\n",
    "df['Age'].fillna(df['Age'].mean(), inplace=True)\n",
    "df['Score'].fillna(df['Score'].mean(), inplace=True)\n",
    "\n",
    "print(df)\n",
    "\n",
    "#5.merge(): This function is used to merge two DataFrames based on a common column or index.\n",
    "\n",
    "#Execution : \n",
    "    \n",
    "import pandas as pd\n",
    "\n",
    "# Sample data for two DataFrames\n",
    "data1 = {\n",
    "    'ID': [101, 102, 103],\n",
    "    'Name': ['Alice', 'Bob', 'Claire']\n",
    "}\n",
    "\n",
    "data2 = {\n",
    "    'ID': [102, 103, 104],\n",
    "    'Score': [85, 92, 78]\n",
    "}\n",
    "\n",
    "df1 = pd.DataFrame(data1)\n",
    "df2 = pd.DataFrame(data2)\n",
    "\n",
    "# Merge the two DataFrames based on the 'ID' column\n",
    "merged_df = pd.merge(df1, df2, on='ID', how='inner')\n",
    "\n",
    "print(merged_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c2c49e54-34de-4c9f-b232-8ab5351dacc0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    A   B   C\n",
      "1  10  40  70\n",
      "3  20  50  80\n",
      "5  30  60  90\n"
     ]
    }
   ],
   "source": [
    "#Question.2 Given a Pandas DataFrame df with columns 'A', 'B', and 'C', write a Python function to re-index the\n",
    "#DataFrame with a new index that starts from 1 and increments by 2 for each row.\n",
    "#Answer.2 : \n",
    "import pandas as pd\n",
    "\n",
    "def reindex_dataframe(df):\n",
    "    # Create a new index starting from 1 and incrementing by 2\n",
    "    new_index = list(range(1, len(df)*2, 2))\n",
    "    \n",
    "    # Reset the DataFrame index using the new index\n",
    "    df.reset_index(drop=True, inplace=True)\n",
    "    df.index = new_index\n",
    "    \n",
    "    return df\n",
    "\n",
    "# Example DataFrame with columns 'A', 'B', and 'C'\n",
    "data = {\n",
    "    'A': [10, 20, 30],\n",
    "    'B': [40, 50, 60],\n",
    "    'C': [70, 80, 90]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Call the reindex_dataframe function\n",
    "df_reindexed = reindex_dataframe(df)\n",
    "\n",
    "# Print the DataFrame with the new index\n",
    "print(df_reindexed)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "209001a2-c888-4991-b3c5-7d4c8f26d67a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of the first three values: 60\n"
     ]
    }
   ],
   "source": [
    "#Question.3 You have a Pandas DataFrame df with a column named 'Values'. Write a Python function that\n",
    "#iterates over the DataFrame and calculates the sum of the first three values in the 'Values' column. The\n",
    "#function should print the sum to the console.\n",
    "#Answer.3 : \n",
    "import pandas as pd\n",
    "\n",
    "def calculate_sum_of_first_three_values(df):\n",
    "    # Extract the first three values from the 'Values' column\n",
    "    first_three_values = df['Values'].iloc[:3]\n",
    "    \n",
    "    # Calculate the sum of the first three values\n",
    "    sum_of_first_three = first_three_values.sum()\n",
    "    \n",
    "    # Print the result to the console\n",
    "    print(\"Sum of the first three values:\", sum_of_first_three)\n",
    "\n",
    "# Example DataFrame with a 'Values' column\n",
    "data = {\n",
    "    'Values': [10, 20, 30, 40, 50]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Call the calculate_sum_of_first_three_values function\n",
    "calculate_sum_of_first_three_values(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8869ffcf-4104-4ef9-9ead-4ed3702ae698",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  Text  Word_Count\n",
      "0  Hello, how are you?           4\n",
      "1    I am doing great!           4\n",
      "2    Python is awesome           3\n"
     ]
    }
   ],
   "source": [
    "#Question.4  Given a Pandas DataFrame df with a column 'Text', write a Python function to create a new column\n",
    "#'Word_Count' that contains the number of words in each row of the 'Text' column \n",
    "#Answer.4 : \n",
    "import pandas as pd\n",
    "\n",
    "def count_words(text):\n",
    "    # Split the text into words and return the word count\n",
    "    return len(text.split())\n",
    "\n",
    "def add_word_count_column(df):\n",
    "    # Apply the 'count_words' function to the 'Text' column and create the 'Word_Count' column\n",
    "    df['Word_Count'] = df['Text'].apply(count_words)\n",
    "\n",
    "    return df\n",
    "\n",
    "# Example DataFrame with a 'Text' column\n",
    "data = {\n",
    "    'Text': ['Hello, how are you?', 'I am doing great!', 'Python is awesome']\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Call the add_word_count_column function\n",
    "df_with_word_count = add_word_count_column(df)\n",
    "\n",
    "# Print the DataFrame with the new 'Word_Count' column\n",
    "print(df_with_word_count)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d1c014f3-3f7a-49b5-b000-73e9c381f2a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame size: 9\n",
      "DataFrame shape: (3, 3)\n"
     ]
    }
   ],
   "source": [
    "#Question.5 How are DataFrame.size() and DataFrame.shape() different?\n",
    "#Answer.5 DataFrame.size and DataFrame.shape are both attributes in Pandas that provide information about the \n",
    "#dimensions of a DataFrame, but they have different meanings and representations:\n",
    "\n",
    "#DataFrame.size:\n",
    "\n",
    "#DataFrame.size gives the total number of elements in the DataFrame.\n",
    "#It returns an integer representing the total count of cells in the DataFrame, which is equal to the product of the number \n",
    "#of rows and the number of columns.\n",
    "#The attribute returns a single integer value.\n",
    "\n",
    "#DataFrame.shape:\n",
    "\n",
    "#DataFrame.shape gives the dimensions of the DataFrame as a tuple (rows, columns).\n",
    "#It returns a tuple representing the number of rows and the number of columns in the DataFrame.\n",
    "#The attribute returns two values, one for the number of rows and the other for the number of columns.\n",
    "\n",
    "#Example:\n",
    "\n",
    "#Let's consider a DataFrame to illustrate the difference between DataFrame.size and DataFrame.shape:\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Sample data for the DataFrame\n",
    "data = {\n",
    "    'A': [10, 20, 30],\n",
    "    'B': [40, 50, 60],\n",
    "    'C': [70, 80, 90]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Get the total number of elements in the DataFrame using size\n",
    "size_of_df = df.size\n",
    "\n",
    "# Get the dimensions of the DataFrame using shape\n",
    "shape_of_df = df.shape\n",
    "\n",
    "print(\"DataFrame size:\", size_of_df)\n",
    "print(\"DataFrame shape:\", shape_of_df)\n",
    "\n",
    "#In this example, the DataFrame df has 3 rows and 3 columns. The DataFrame.size attribute returns the total number of elements,\n",
    "#which is 9 (3 rows x 3 columns). The DataFrame.shape attribute returns a tuple with two values, representing the number of\n",
    "#rows (3) and the number of columns (3) in the DataFrame.\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "d773fbef-b55d-49c3-98d6-33a9a8e2e9e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Name  Age  Gender\n",
      "0   Alice   25  Female\n",
      "1     Bob   30    Male\n",
      "2  Claire   27  Female\n"
     ]
    }
   ],
   "source": [
    "#Question.6 Which function of pandas do we use to read an excel file?\n",
    "#Answer.6 To read an Excel file in Pandas, you can use the pd.read_excel() function. This function allows you to\n",
    "#read data from an Excel file and create a DataFrame based on the contents of the file.\n",
    "\n",
    "#Here's how you can use pd.read_excel():\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "# Read data from an Excel file into a DataFrame\n",
    "df = pd.read_excel('output.xlsx')\n",
    "\n",
    "# Print the DataFrame\n",
    "print(df)\n",
    "#In the code above, pd.read_excel('output.xlsx') reads the data from the 'output.xlsx' Excel file and creates a DataFrame\n",
    "#named df based on the contents of the file. The print(df) statement displays the DataFrame's content."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "63707a64-93cc-476d-9c18-5fea3301c777",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DataFrame : \n",
      "                     Email\n",
      "0     john.doe@example.com\n",
      "1  alice.smith@example.com\n",
      "2    bob.jones@example.com\n",
      "\n",
      "Same dataframe with the new column 'Username'\n",
      "                     Email     Username\n",
      "0     john.doe@example.com     john.doe\n",
      "1  alice.smith@example.com  alice.smith\n",
      "2    bob.jones@example.com    bob.jones\n"
     ]
    }
   ],
   "source": [
    "#Question.7 You have a Pandas DataFrame df that contains a column named 'Email' that contains email\n",
    "#addresses in the format 'username@domain.com'. Write a Python function that creates a new column\n",
    "#'Username' in df that contains only the username part of each email address.\n",
    "#The username is the part of the email address that appears before the '@' symbol. For example, if the\n",
    "#email address is 'john.doe@example.com', the 'Username' column should contain 'john.doe'. Your\n",
    "#function should extract the username from each email address and store it in the new 'Username'\n",
    "#column.\n",
    "#Answer.7 You can create a new 'Username' column in the DataFrame df by extracting the username part from each email \n",
    "#address in the 'Email' column using the str.split() method. Here's the Python function to achieve this:\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "def extract_username(df):\n",
    "    # Split the 'Email' column by '@' and extract the username part\n",
    "    df['Username'] = df['Email'].str.split('@').str[0]\n",
    "    \n",
    "    return df\n",
    "\n",
    "# Example DataFrame with an 'Email' column\n",
    "data = {\n",
    "    'Email': ['john.doe@example.com', 'alice.smith@example.com', 'bob.jones@example.com']\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "print(\"DataFrame : \")\n",
    "print(df)\n",
    "print()\n",
    "# Call the extract_username function\n",
    "df_with_username = extract_username(df)\n",
    "\n",
    "# Print the DataFrame with the new 'Username' column\n",
    "print(\"Same dataframe with the new column 'Username'\")\n",
    "print(df_with_username)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "9bcfc47e-0d6f-4a6f-88d8-466cc5627821",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   A  B  C\n",
      "1  8  2  7\n",
      "2  6  9  4\n",
      "4  9  1  2\n"
     ]
    }
   ],
   "source": [
    "#Question.8 You have a Pandas DataFrame df with columns 'A', 'B', and 'C'. Write a Python function that selects\n",
    "#all rows where the value in column 'A' is greater than 5 and the value in column 'B' is less than 10. The\n",
    "#function should return a new DataFrame that contains only the selected rows.\n",
    "#For example, if df contains the following values:\n",
    "#A B C\n",
    "#0 3 5 1\n",
    "#1 8 2 7\n",
    "#2 6 9 4\n",
    "#3 2 3 5\n",
    "#4 9 1 2\n",
    "\n",
    "#Your function should select the following rows: A B C\n",
    "#1 8 2 7\n",
    "#4 9 1 2\n",
    "#The function should return a new DataFrame that contains only the selected rows.\n",
    "#Answer.8 : \n",
    "import pandas as pd\n",
    "\n",
    "def select_rows(df):\n",
    "    # Use boolean indexing to select rows where 'A' > 5 and 'B' < 10\n",
    "    selected_rows = df[(df['A'] > 5) & (df['B'] < 10)]\n",
    "    \n",
    "    return selected_rows\n",
    "\n",
    "# Example DataFrame with columns 'A', 'B', and 'C'\n",
    "data = {\n",
    "    'A': [3, 8, 6, 2, 9],\n",
    "    'B': [5, 2, 9, 3, 1],\n",
    "    'C': [1, 7, 4, 5, 2]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Call the select_rows function\n",
    "selected_df = select_rows(df)\n",
    "\n",
    "# Print the new DataFrame containing only the selected rows\n",
    "print(selected_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f8dc358a-add4-4996-a35f-5131955c78ae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean: 30.0\n",
      "Median: 30.0\n",
      "Standard Deviation: 15.811388300841896\n"
     ]
    }
   ],
   "source": [
    "#Question.9 Given a Pandas DataFrame df with a column 'Values', write a Python function to calculate the mean,\n",
    "#median, and standard deviation of the values in the 'Values' column.\n",
    "#Answer.9 : \n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "def calculate_statistics(df):\n",
    "    # Calculate mean, median, and standard deviation of the 'Values' column\n",
    "    mean_value = df['Values'].mean()\n",
    "    median_value = df['Values'].median()\n",
    "    std_deviation = df['Values'].std()\n",
    "    \n",
    "    return mean_value, median_value, std_deviation\n",
    "\n",
    "# Example DataFrame with a 'Values' column\n",
    "data = {\n",
    "    'Values': [10, 20, 30, 40, 50]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Call the calculate_statistics function\n",
    "mean_val, median_val, std_dev = calculate_statistics(df)\n",
    "\n",
    "# Print the calculated statistics\n",
    "print(\"Mean:\", mean_val)\n",
    "print(\"Median:\", median_val)\n",
    "print(\"Standard Deviation:\", std_dev)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ea46ed64-5fd8-4771-bad3-f36704c24bac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Date  Sales  MovingAverage\n",
      "0 2023-07-01    100          100.0\n",
      "1 2023-07-02    150          125.0\n",
      "2 2023-07-03    200          150.0\n",
      "3 2023-07-04    250          175.0\n",
      "4 2023-07-05    300          200.0\n",
      "5 2023-07-06    350          225.0\n",
      "6 2023-07-07    400          250.0\n",
      "7 2023-07-08    450          300.0\n",
      "8 2023-07-09    500          350.0\n",
      "9 2023-07-10    550          400.0\n"
     ]
    }
   ],
   "source": [
    "#Question.10 Given a Pandas DataFrame df with a column 'Sales' and a column 'Date', write a Python function to\n",
    "#create a new column 'MovingAverage' that contains the moving average of the sales for the past 7 days\n",
    "#for each row in the DataFrame. The moving average should be calculated using a window of size 7 and\n",
    "#should include the current day.\n",
    "#answer.10 : \n",
    "import pandas as pd\n",
    "\n",
    "def calculate_moving_average(df):\n",
    "    # Calculate the moving average using a rolling window of size 7\n",
    "    df['MovingAverage'] = df['Sales'].rolling(window=7, min_periods=1).mean()\n",
    "    \n",
    "    return df\n",
    "\n",
    "# Example DataFrame with 'Sales' and 'Date' columns\n",
    "data = {\n",
    "    'Date': pd.date_range(start='2023-07-01', periods=10, freq='D'),\n",
    "    'Sales': [100, 150, 200, 250, 300, 350, 400, 450, 500, 550]\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Call the calculate_moving_average function\n",
    "df_with_moving_avg = calculate_moving_average(df)\n",
    "\n",
    "# Print the DataFrame with the new 'MovingAverage' column\n",
    "print(df_with_moving_avg)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "96abd19b-3b64-40c7-b68f-dd4669cf9388",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Date    Weekday\n",
      "0 2023-07-01   Saturday\n",
      "1 2023-07-02     Sunday\n",
      "2 2023-07-03     Monday\n",
      "3 2023-07-04    Tuesday\n",
      "4 2023-07-05  Wednesday\n"
     ]
    }
   ],
   "source": [
    "#Question.11 You have a Pandas DataFrame df with a column 'Date'. Write a Python function that creates a new\n",
    "#column 'Weekday' in the DataFrame. The 'Weekday' column should contain the weekday name (e.g.\n",
    "#Monday, Tuesday) corresponding to each date in the 'Date' column.\n",
    "#Answer.11 : \n",
    "import pandas as pd\n",
    "\n",
    "def add_weekday_column(df):\n",
    "    # Convert 'Date' column to datetime if it is not already\n",
    "    df['Date'] = pd.to_datetime(df['Date'])\n",
    "    \n",
    "    # Extract weekday name and create the 'Weekday' column\n",
    "    df['Weekday'] = df['Date'].dt.day_name()\n",
    "    \n",
    "    return df\n",
    "\n",
    "# Example DataFrame with a 'Date' column\n",
    "data = {\n",
    "    'Date': ['2023-07-01', '2023-07-02', '2023-07-03', '2023-07-04', '2023-07-05']\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Call the add_weekday_column function\n",
    "df_with_weekday = add_weekday_column(df)\n",
    "\n",
    "# Print the DataFrame with the new 'Weekday' column\n",
    "print(df_with_weekday)\n",
    "\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "70116cca-040e-4e2f-bb89-d4b36ddd1c28",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Date\n",
      "0 2023-01-05\n",
      "1 2023-01-15\n",
      "3 2023-01-20\n",
      "4 2023-01-25\n"
     ]
    }
   ],
   "source": [
    "#Question.12 Given a Pandas DataFrame df with a column 'Date' that contains timestamps, write a Python\n",
    "#function to select all rows where the date is between '2023-01-01' and '2023-01-31'.\n",
    "#Answer.12 : \n",
    "import pandas as pd\n",
    "\n",
    "def select_rows_within_date_range(df):\n",
    "    # Convert 'Date' column to datetime if it is not already\n",
    "    df['Date'] = pd.to_datetime(df['Date'])\n",
    "    \n",
    "    # Select rows where the date is within the specified range\n",
    "    selected_rows = df[(df['Date'] >= '2023-01-01') & (df['Date'] <= '2023-01-31')]\n",
    "    \n",
    "    return selected_rows\n",
    "\n",
    "# Example DataFrame with a 'Date' column\n",
    "data = {\n",
    "    'Date': ['2023-01-05', '2023-01-15', '2023-02-10', '2023-01-20', '2023-01-25']\n",
    "}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Call the select_rows_within_date_range function\n",
    "selected_df = select_rows_within_date_range(df)\n",
    "\n",
    "# Print the selected DataFrame\n",
    "print(selected_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d201ff10-71b2-4ecf-8722-0ac4b1a6d253",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.13 To use the basic functions of pandas, what is the first and foremost necessary library that needs to\n",
    "#be imported?\n",
    "#Answer.13 To use the basic functions of pandas, the first and foremost library that needs to be imported is the \n",
    "#pandas library itself. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
