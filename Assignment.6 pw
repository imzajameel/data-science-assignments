{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4b7589a7-07f3-4296-8d0c-aa2f9477d2a6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Toyota\n",
      "Camry\n",
      "2022\n",
      "The Toyota Camry has started.\n",
      "True\n",
      "The Toyota Camry has stopped.\n",
      "False\n",
      "Honda\n",
      "Accord\n",
      "2021\n",
      "The Honda Accord has started.\n",
      "True\n",
      "The Honda Accord has stopped.\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "#Question.1 Explain Class and Object with respect to Object-Oriented-Programming.Give a suitable example .\n",
    "#Answer.1 In object-oriented programming (OOP), a class is a blueprint or a template for creating objects. \n",
    "#It defines the properties (attributes) and behaviors (methods) that objects of that class will have.\n",
    "#A class can be seen as a user-defined data type that encapsulates data and functionality.\n",
    "\n",
    "#An object, on the other hand, is an instance of a class. It represents a specific occurrence or realization of the \n",
    "#class, with its own unique state and behavior. Objects are created based on the defined class and can interact with \n",
    "#each other and the program.\n",
    "\n",
    "#Example : \n",
    "class Car:\n",
    "    def __init__(self, make, model, year):\n",
    "        self.make = make\n",
    "        self.model = model\n",
    "        self.year = year\n",
    "        self.is_running = False\n",
    "\n",
    "    def start(self):\n",
    "        self.is_running = True\n",
    "        print(f\"The {self.make} {self.model} has started.\")\n",
    "\n",
    "    def stop(self):\n",
    "        self.is_running = False\n",
    "        print(f\"The {self.make} {self.model} has stopped.\")\n",
    "\n",
    "# Creating objects of the Car class\n",
    "car1 = Car(\"Toyota\", \"Camry\", 2022)\n",
    "car2 = Car(\"Honda\", \"Accord\", 2021)\n",
    "\n",
    "# Accessing attributes and invoking methods of car1\n",
    "print(car1.make)      # Output: Toyota\n",
    "print(car1.model)     # Output: Camry\n",
    "print(car1.year)      # Output: 2022\n",
    "\n",
    "car1.start()          # Output: The Toyota Camry has started.\n",
    "print(car1.is_running)  # Output: True\n",
    "\n",
    "car1.stop()           # Output: The Toyota Camry has stopped.\n",
    "print(car1.is_running)  # Output: False\n",
    "\n",
    "# Accessing attributes and invoking methods of car2\n",
    "print(car2.make)      # Output: Honda\n",
    "print(car2.model)     # Output: Accord\n",
    "print(car2.year)      # Output: 2021\n",
    "\n",
    "car2.start()          # Output: The Honda Accord has started.\n",
    "print(car2.is_running)  # Output: True\n",
    "\n",
    "car2.stop()           # Output: The Honda Accord has stopped.\n",
    "print(car2.is_running)  # Output: False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d615ac9a-84ce-4ee7-ad00-96be3b973880",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.2 Name the four pillars of OOPs.\n",
    "#Answer.2 The four pillars of OOPs are : \n",
    "#1.Encapsulation\n",
    "#2.Inheritance\n",
    "#3.Polymorphism\n",
    "#4.Abstraction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "953bf107-e0a2-47fd-a613-4acefd160244",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: Alice, Age: 25\n",
      "Name: Bob, Age: 30\n"
     ]
    }
   ],
   "source": [
    "#Question.3 Explain why the __init__() function is used.Give a suitable example \n",
    "#Answer.3 In Python, the __init__() function is a special method used in classes. It is called the constructor method\n",
    "#and is automatically executed when a new object is created from a class. The primary purpose of the __init__() method \n",
    "#is to initialize the attributes of an object with specific values.\n",
    "#Example : \n",
    "class Person:\n",
    "    def __init__(self, name, age):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "\n",
    "    def display_info(self):\n",
    "        print(f\"Name: {self.name}, Age: {self.age}\")\n",
    "\n",
    "# Creating objects of the Person class\n",
    "person1 = Person(\"Alice\", 25)\n",
    "person2 = Person(\"Bob\", 30)\n",
    "\n",
    "person1.display_info()  # Output: Name: Alice, Age: 25\n",
    "person2.display_info()  # Output: Name: Bob, Age: 30"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb76ad89-eb92-43be-8ca2-02694b23602c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.4 Why self is used in OOps ? \n",
    "#Answer.4 In object-oriented programming (OOP) , in Python, the self keyword is used as the first parameter in class\n",
    "#methods,including the __init__() method. It is a convention, though not a requirement, to name this parameter self. \n",
    "#The purpose of self is to refer to the instance of the class itself.\n",
    "\n",
    "#When you define a method within a class, you need to explicitly include self as the first parameter in the method \n",
    "#definition. This allows the method to access and manipulate the attributes and methods of the specific instance of \n",
    "#the class to which it belongs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f7c037e5-f2e1-46a5-a753-b63a090690e1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Buddy is eating.\n",
      "Woof!\n",
      "I am flying.\n",
      "I am swimming.\n",
      "Animal is eating.\n",
      "Mammal is breathing.\n",
      "Dog is barking.\n",
      "Drawing a shape.\n",
      "Drawing a shape.\n",
      "Animal is moving.\n",
      "Carnivore is hunting.\n",
      "Herbivore is grazing.\n",
      "Omnivore is eating.\n"
     ]
    }
   ],
   "source": [
    "#Question.5 What is inheritance ? Give an example for each type of inheritance ?\n",
    "#Answer.5 Inheritance is a mechanism that allows us to define a class that inherits all the methods and properties from\n",
    "#another class.Parent class is the class being inherited from, also called base class. Child class is the class that \n",
    "#inherits from another class, also called derived class.\n",
    "\n",
    "#1.Example of Single Inheritance : \n",
    "class Animal:\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "\n",
    "    def eat(self):\n",
    "        print(f\"{self.name} is eating.\")\n",
    "\n",
    "class Dog(Animal):\n",
    "    def bark(self):\n",
    "        print(\"Woof!\")\n",
    "\n",
    "# Creating an object of the Dog class\n",
    "dog = Dog(\"Buddy\")\n",
    "dog.eat()   # Output: Buddy is eating.\n",
    "dog.bark()  # Output: Woof!\n",
    "\n",
    "#2. Example of Multiple Inheritance \n",
    "class Flying:\n",
    "    def fly(self):\n",
    "        print(\"I am flying.\")\n",
    "\n",
    "class Swimming:\n",
    "    def swim(self):\n",
    "        print(\"I am swimming.\")\n",
    "\n",
    "class Duck(Flying, Swimming):\n",
    "    pass\n",
    "\n",
    "# Creating an object of the Duck class\n",
    "duck = Duck()\n",
    "duck.fly()   # Output: I am flying.\n",
    "duck.swim()  # Output: I am swimming.\n",
    "\n",
    "#3. Example of Multilevel Inheritance\n",
    "class Animal:\n",
    "    def eat(self):\n",
    "        print(\"Animal is eating.\")\n",
    "\n",
    "class Mammal(Animal):\n",
    "    def breathe(self):\n",
    "        print(\"Mammal is breathing.\")\n",
    "\n",
    "class Dog(Mammal):\n",
    "    def bark(self):\n",
    "        print(\"Dog is barking.\")\n",
    "\n",
    "# Creating an object of the Dog class\n",
    "dog = Dog()\n",
    "dog.eat()       # Output: Animal is eating.\n",
    "dog.breathe()   # Output: Mammal is breathing.\n",
    "dog.bark()      # Output: Dog is barking.\n",
    "\n",
    "#4.Example of Hierarchical Inheritance : \n",
    "class Shape:\n",
    "    def draw(self):\n",
    "        print(\"Drawing a shape.\")\n",
    "\n",
    "class Circle(Shape):\n",
    "    def draw_circle(self):\n",
    "        print(\"Drawing a circle.\")\n",
    "\n",
    "class Rectangle(Shape):\n",
    "    def draw_rectangle(self):\n",
    "        print(\"Drawing a rectangle.\")\n",
    "\n",
    "# Creating objects of the Circle and Rectangle classes\n",
    "circle = Circle()\n",
    "rectangle = Rectangle()\n",
    "\n",
    "circle.draw()      # Output: Drawing a shape.\n",
    "rectangle.draw()   # Output: Drawing a shape.\n",
    "\n",
    "#5. Example of Hybrid Inheritance \n",
    "class Animal:\n",
    "    def move(self):\n",
    "        print(\"Animal is moving.\")\n",
    "\n",
    "class Carnivore(Animal):\n",
    "    def hunt(self):\n",
    "        print(\"Carnivore is hunting.\")\n",
    "\n",
    "class Herbivore(Animal):\n",
    "    def graze(self):\n",
    "        print(\"Herbivore is grazing.\")\n",
    "\n",
    "class Omnivore(Carnivore, Herbivore):\n",
    "    def eat(self):\n",
    "        print(\"Omnivore is eating.\")\n",
    "\n",
    "# Creating an object of the Omnivore class\n",
    "omnivore = Omnivore()\n",
    "omnivore.move()     # Output: Animal is moving.\n",
    "omnivore.hunt()     # Output: Carnivore is hunting.\n",
    "omnivore.graze()    # Output: Herbivore is grazing.\n",
    "omnivore.eat()      # Output: Omnivore is eating."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "508f698d-10af-42bb-8170-6d6d362f9f59",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
