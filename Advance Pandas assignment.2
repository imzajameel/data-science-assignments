{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5dcee27d-3648-4e2c-bffb-35ec99392cd2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "course_name    Machine Learning\n",
      "duration                      3\n",
      "Name: 1, dtype: object\n"
     ]
    }
   ],
   "source": [
    "#Pandas Advance Assignment.2 \n",
    "#Consider following code to answer further questions:\n",
    "#import pandas as pd\n",
    "#course_name = [‘Data Science’, ‘Machine Learning’, ‘Big Data’, ‘Data Engineer’]\n",
    "#duration = [2,3,6,4]\n",
    "#df = pd.DataFrame(data = {‘course_name’ : course_name, ‘duration’ : duration})\n",
    "#Question.1 Write a code to print the data present in the second row of the dataframe, df.\n",
    "#Answer.1 : \n",
    "import pandas as pd\n",
    "\n",
    "course_name = ['Data Science', 'Machine Learning', 'Big Data', 'Data Engineer']\n",
    "duration = [2, 3, 6, 4]\n",
    "df = pd.DataFrame(data={'course_name': course_name, 'duration': duration})\n",
    "\n",
    "# Print the data in the second row\n",
    "second_row_data = df.iloc[1]\n",
    "print(second_row_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5518c08-b2e8-45e3-a870-055f00f9396f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.2 What is the difference between the functions loc and iloc in pandas.DataFrame?\n",
    "#Answer.2  In Pandas, loc and iloc are two methods used to access data from a DataFrame, but they have some key \n",
    "#differences in how they work:\n",
    "\n",
    "#loc: The loc method is label-based indexing, which means you use it to access data using row and column labels \n",
    "#(names) rather than their integer positions. You can use loc to access specific rows and columns using their labels.\n",
    "\n",
    "#Syntax: df.loc[row_label, column_label]\n",
    "\n",
    "#Example:\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "data = {'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Age': [25, 30, 22],\n",
    "        'City': ['New York', 'San Francisco', 'Los Angeles']}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Access data for row with label 'Bob'\n",
    "row_bob = df.loc[1]\n",
    "\n",
    "# Access data for row with label 'Alice' and column 'Age'\n",
    "alice_age = df.loc['Alice', 'Age']\n",
    "\n",
    "#iloc: The iloc method is integer-based indexing, which means you use it to access data using row and column \n",
    "#integer positions. You can use iloc to access specific rows and columns using their integer indices.\n",
    "\n",
    "#Syntax: df.iloc[row_index, column_index]\n",
    "\n",
    "#Example:\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "data = {'Name': ['Alice', 'Bob', 'Charlie'],\n",
    "        'Age': [25, 30, 22],\n",
    "        'City': ['New York', 'San Francisco', 'Los Angeles']}\n",
    "\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Access data for the second row (index 1)\n",
    "row_bob = df.iloc[1]\n",
    "\n",
    "# Access data for the first row and second column (row index 0, column index 1)\n",
    "alice_age = df.iloc[0, 1]\n",
    "\n",
    "#In summary, the key difference between loc and iloc lies in how they access data: loc uses labels (names\n",
    "#while iloc uses integer positions (indices). It's essential to understand the distinction and choose the appropriate \n",
    "#method based on whether you want to access data using labels or integer indices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c7aab755-9b7e-4167-934d-d9ff22857714",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        course_name  duration\n",
      "3     Data Engineer         4\n",
      "0      Data Science         2\n",
      "1  Machine Learning         3\n",
      "2          Big Data         6\n",
      "Output of new_df.loc[2]:\n",
      "course_name    Big Data\n",
      "duration              6\n",
      "Name: 2, dtype: object\n",
      "\n",
      "Output of new_df.iloc[2]:\n",
      "course_name    Machine Learning\n",
      "duration                      3\n",
      "Name: 1, dtype: object\n"
     ]
    }
   ],
   "source": [
    "#Question.3 Reindex the given dataframe using a variable, reindex = [3,0,1,2] and store it in the variable, new_df\n",
    "#then find the output for both new_df.loc[2] and new_df.iloc[2].Did you observe any difference in both the outputs? \n",
    "#If so then explain it.\n",
    "#Answer.3 To reindex the given DataFrame and then find the output for both new_df.loc[2] and new_df.iloc[2], follow \n",
    "#these steps:\n",
    "import pandas as pd\n",
    "\n",
    "course_name = ['Data Science', 'Machine Learning', 'Big Data', 'Data Engineer']\n",
    "duration = [2, 3, 6, 4]\n",
    "df = pd.DataFrame(data={'course_name': course_name, 'duration': duration})\n",
    "\n",
    "# Reindex the DataFrame using a variable 'reindex'\n",
    "reindex = [3, 0, 1, 2]\n",
    "new_df = df.reindex(reindex)\n",
    "\n",
    "# Print new_df to observe the reindexed DataFrame\n",
    "print(new_df)\n",
    "\n",
    "# Find the output for both new_df.loc[2] and new_df.iloc[2]\n",
    "print(\"Output of new_df.loc[2]:\")\n",
    "print(new_df.loc[2])\n",
    "\n",
    "print(\"\\nOutput of new_df.iloc[2]:\")\n",
    "print(new_df.iloc[2])\n",
    "\n",
    "#Difference in Outputs:\n",
    "\n",
    "#When using new_df.loc[2], it returns the row with label 2 in the DataFrame new_df. In this case, the label 2 \n",
    "#corresponds to the row containing the course \"Big Data\" with a duration of 6.\n",
    "#When using new_df.iloc[2], it returns the row with the integer index 2 in the DataFrame new_df. In this case, \n",
    "#the integer index 2 corresponds to the row containing the course \"Machine Learning\" with a duration of 3.\n",
    "#The outputs are different because loc is label-based indexing, while iloc is integer-based indexing. It's \n",
    "#important to be cautious while using loc and iloc to avoid confusion between label-based and integer-based indexing,\n",
    "#especially when the DataFrame has been reindexed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "474ec0b7-0909-4119-aef1-b1c0f0364c4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean of each column:\n",
      "column_1    0.525449\n",
      "column_2    0.421913\n",
      "column_3    0.479276\n",
      "column_4    0.444187\n",
      "column_5    0.506642\n",
      "column_6    0.566841\n",
      "dtype: float64\n",
      "\n",
      "Standard deviation of 'column_2': 0.39130629118663235\n"
     ]
    }
   ],
   "source": [
    "#Consider the below code to answer further questions:\n",
    "#import pandas as pd\n",
    "#import numpy as np\n",
    "#columns = ['column_1', 'column_2', 'column_3', 'column_4', 'column_5', 'column_6']\n",
    "#indices = [1,2,3,4,5,6]\n",
    "#Creating a dataframe:\n",
    "#df1 = pd.DataFrame(np.random.rand(6,6), columns = columns, index = indices)\n",
    "\n",
    "#Question.4 Q4. Write a code to find the following statistical measurements for the above dataframe df1:\n",
    "#(i) mean of each and every column present in the dataframe.\n",
    "#(ii) standard deviation of column, ‘column_2’\n",
    "\n",
    "#Answer.4 To find the requested statistical measurements for the DataFrame df1, you can use the Pandas functions\n",
    "#directly. Here's how to calculate the mean of each column and the standard deviation of the 'column_2':\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "columns = ['column_1', 'column_2', 'column_3', 'column_4', 'column_5', 'column_6']\n",
    "indices = [1, 2, 3, 4, 5, 6]\n",
    "\n",
    "# Creating a DataFrame:\n",
    "df1 = pd.DataFrame(np.random.rand(6, 6), columns=columns, index=indices)\n",
    "\n",
    "# (i) Mean of each and every column\n",
    "column_means = df1.mean()\n",
    "print(\"Mean of each column:\")\n",
    "print(column_means)\n",
    "\n",
    "# (ii) Standard deviation of column 'column_2'\n",
    "column_2_std = df1['column_2'].std()\n",
    "print(\"\\nStandard deviation of 'column_2':\", column_2_std)\n",
    "\n",
    "#The mean() function of DataFrame calculates the mean for each column by default. It returns a Pandas Series with \n",
    "#column names as indices and their respective means as values.\n",
    "#The std() function of DataFrame calculates the standard deviation of a specific column. In this case, we applied it to \n",
    "#'column_2' to get the standard deviation for that particular column.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8ec7028a-ec33-4a87-80f9-cf87b5ab2e6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.5 Replace the data present in the second row of column, ‘column_2’ by a string variable then find the\n",
    "#mean of column, column_2.If you are getting errors in executing it then explain why.\n",
    "#Answer.5 : \n",
    "#import pandas as pd\n",
    "#import numpy as np\n",
    "\n",
    "#columns = ['column_1', 'column_2', 'column_3', 'column_4', 'column_5', 'column_6']\n",
    "#indices = [1, 2, 3, 4, 5, 6]\n",
    "\n",
    "# Creating a DataFrame:\n",
    "#df1 = pd.DataFrame(np.random.rand(6, 6), columns=columns, index=indices)\n",
    "# Replace data in the second row of 'column_2' with a string variable\n",
    "#string_data = \"Replacement String\"\n",
    "#df1.loc[2, 'column_2'] = string_data\n",
    "# Calculate the mean of 'column_2'\n",
    "#column_2_mean = df1['column_2'].mean()\n",
    "#print(\"Mean of 'column_2':\", column_2_mean)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "31691c78-ce9e-4eb1-8048-57882bcdb329",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original DataFrame:\n",
      "   column_1  column_2  column_3  column_4  column_5  column_6\n",
      "1  0.258468  0.791605  0.839137  0.752923  0.653164  0.564961\n",
      "2  0.118276  0.587746  0.463273  0.624895  0.432016  0.917645\n",
      "3  0.999107  0.746146  0.143522  0.599834  0.001262  0.016035\n",
      "4  0.883904  0.499121  0.581976  0.725736  0.421534  0.495605\n",
      "5  0.404364  0.878333  0.563419  0.436258  0.556059  0.039007\n",
      "6  0.058316  0.306156  0.913650  0.378136  0.773521  0.692392\n",
      "\n",
      "Mean of 'column_2': 0.644272166305248\n"
     ]
    }
   ],
   "source": [
    "#The error we are encountering is due to the attempt to calculate the mean of 'column_2' after replacing the data with a\n",
    "#string value. The mean function (np.mean or pd.Series.mean()) cannot perform mathematical operations on a mixture of \n",
    "#numeric and non-numeric data types.\n",
    "\n",
    "#To fix this issue, we can convert the 'column_2' values to numeric before calculating the mean. Here's the modified \n",
    "#code:\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "columns = ['column_1', 'column_2', 'column_3', 'column_4', 'column_5', 'column_6']\n",
    "indices = [1, 2, 3, 4, 5, 6]\n",
    "\n",
    "# Creating a DataFrame:\n",
    "df1 = pd.DataFrame(np.random.rand(6, 6), columns=columns, index=indices)\n",
    "\n",
    "# Print the original DataFrame\n",
    "print(\"Original DataFrame:\")\n",
    "print(df1)\n",
    "\n",
    "# Replace data in the second row of 'column_2' with a string variable\n",
    "string_data = \"Replacement String\"\n",
    "df1.loc[2, 'column_2'] = string_data\n",
    "\n",
    "# Convert 'column_2' to numeric type (if possible)\n",
    "df1['column_2'] = pd.to_numeric(df1['column_2'], errors='coerce')\n",
    "\n",
    "# Calculate the mean of 'column_2'\n",
    "column_2_mean = df1['column_2'].mean()\n",
    "print(\"\\nMean of 'column_2':\", column_2_mean)\n",
    " \n",
    "#In this modified version, we added pd.to_numeric() to convert the values in 'column_2' to numeric type. The parameter \n",
    "#errors='coerce' handles any non-numeric values by converting them to NaN (Not a Number) so that they don't interfere\n",
    "#with the calculation of the mean. Now, the mean of 'column_2' should be calculated correctly, even after replacing the\n",
    "#data with a string value."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "80bbcc8c-e131-438f-92b8-e3e97064c425",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.6 What do you understand about the windows function in pandas and list the types of windows\n",
    "#functions?\n",
    "#Answer.6 In Pandas, the term \"window functions\" refers to a group of operations that allow you to perform calculations \n",
    "#on a specific window of data within a DataFrame. These window functions are particularly useful for tasks like moving\n",
    "#averages, cumulative sums, rolling statistics, and other time-series and sequential data computations.\n",
    "\n",
    "#The main idea behind window functions is to apply a function to a subset of data (window) defined by a fixed-size or\n",
    "#variable-size window, and then \"slide\" the window along the data to calculate the function for each window. This sliding\n",
    "#behavior enables the window functions to compute aggregated results over different partitions or time intervals.\n",
    "\n",
    "#Pandas provides a powerful window function framework, primarily through the rolling and expanding methods of Series \n",
    "#and DataFrames. The main types of window functions are as follows:\n",
    "\n",
    "#Rolling Window Functions (rolling()):\n",
    "#The rolling window function calculates a statistic (e.g., mean, sum, standard deviation) over a fixed-size window that\n",
    "#\"rolls\" along the data. The window size is specified, and the function moves one step at a time to calculate the result\n",
    "#for each window. This is useful for tasks involving moving averages, rolling sums, etc.\n",
    "\n",
    "#Expanding Window Functions (expanding()):\n",
    "#The expanding window function calculates a statistic over a window that grows with the data. It starts with the first\n",
    "#data point and expands to include additional points as it moves along the data. This is useful for cumulative sums,\n",
    "#cumulative products, etc.\n",
    "\n",
    "#Exponentially Weighted Window Functions (ewm()):\n",
    "#The exponentially weighted moving average (EWMA) function assigns exponentially decreasing weights to data points in a\n",
    "#window. This means more recent data points have more influence on the result than older ones. EWMA is useful for tasks\n",
    "#where more significance is given to recent observations, such as trend analysis.\n",
    "\n",
    "#These window functions provide great flexibility in performing complex computations on rolling or expanding subsets of \n",
    "#data efficiently. They are especially handy when dealing with time-series data or sequential data where temporal \n",
    "#dependencies are important.\n",
    "\n",
    "#To use these window functions, you typically apply them to a specific column or series in a DataFrame and then chain\n",
    "#them with aggregation functions like mean(), sum(), std(), etc., to get the desired results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e2ef1a78-0011-4225-ab15-e2dc1e0d5df4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Current Month: 7\n",
      "Current Year: 2023\n"
     ]
    }
   ],
   "source": [
    "#Question.7 Write a code to print only the current month and year at the time of answering this question.\n",
    "#Answer.7 : \n",
    "import pandas as pd\n",
    "\n",
    "# Get the current date and time\n",
    "current_date = pd.Timestamp.now()\n",
    "\n",
    "# Extract the month and year from the current date\n",
    "current_month = current_date.month\n",
    "current_year = current_date.year\n",
    "\n",
    "# Print the current month and year\n",
    "print(\"Current Month:\", current_month)\n",
    "print(\"Current Year:\", current_year)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f42da20d-6373-413d-84da-59a87cb44f20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the start date (YYYY-MM-DD):\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 2023-01-01\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the end date (YYYY-MM-DD):\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 2023-01-03\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time difference: 2 days, 0 hours, 0 minutes\n"
     ]
    }
   ],
   "source": [
    "#Question.8 Write a Python program that takes in two dates as input (in the format YYYY-MM-DD) and calculates the \n",
    "#difference between them in days, hours, and minutes using Pandas time delta. Theprogram should prompt the user to enter\n",
    "#the dates and display the result.\n",
    "#Answer.8 : \n",
    "import pandas as pd\n",
    "\n",
    "def calculate_time_difference(start_date, end_date):\n",
    "    # Convert the input dates to pandas Timestamp objects\n",
    "    start_timestamp = pd.Timestamp(start_date)\n",
    "    end_timestamp = pd.Timestamp(end_date)\n",
    "\n",
    "    # Calculate the time difference using pandas timedelta\n",
    "    time_difference = end_timestamp - start_timestamp\n",
    "\n",
    "    # Extract days, hours, and minutes from the time difference\n",
    "    days = time_difference.days\n",
    "    hours = time_difference.seconds // 3600\n",
    "    minutes = (time_difference.seconds // 60) % 60\n",
    "\n",
    "    return days, hours, minutes\n",
    "\n",
    "def main():\n",
    "    print(\"Enter the start date (YYYY-MM-DD):\")\n",
    "    start_date = input()\n",
    "    \n",
    "    print(\"Enter the end date (YYYY-MM-DD):\")\n",
    "    end_date = input()\n",
    "\n",
    "    try:\n",
    "        days, hours, minutes = calculate_time_difference(start_date, end_date)\n",
    "        print(f\"Time difference: {days} days, {hours} hours, {minutes} minutes\")\n",
    "    except ValueError:\n",
    "        print(\"Invalid date format. Please enter dates in the format YYYY-MM-DD.\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "1c226f02-7056-4e28-bc4e-fb539a806c75",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the file path of the CSV file:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " /home/jovyan/work/categorical_data.csv\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the column name to convert to categorical:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " Country\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the category order as a comma-separated list:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " USA,UK,Canada,Australia\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Sorted DataFrame:\n",
      "      Name  Gender    Country      Hobby\n",
      "0    Alice  Female        USA    Reading\n",
      "3    David    Male        USA    Cooking\n",
      "2  Charlie    Male         UK      Music\n",
      "1      Bob    Male     Canada     Sports\n",
      "4     Emma  Female  Australia  Traveling\n"
     ]
    }
   ],
   "source": [
    "#Question.9 Write a Python program that reads a CSV file containing categorical data and converts a specified\n",
    "#column to a categorical data type. The program should prompt the user to enter the file path, column\n",
    "#name, and category order, and then display the sorted data.\n",
    "#Answer.9 :  \n",
    "import pandas as pd\n",
    "\n",
    "def convert_column_to_categorical(file_path, column_name, category_order):\n",
    "    # Read the CSV file into a DataFrame\n",
    "    df = pd.read_csv(file_path)\n",
    "\n",
    "    # Convert the specified column to categorical with custom category order\n",
    "    df[column_name] = pd.Categorical(df[column_name], categories=category_order, ordered=True)\n",
    "\n",
    "    # Sort the DataFrame by the specified column\n",
    "    df_sorted = df.sort_values(by=column_name)\n",
    "\n",
    "    return df_sorted\n",
    "\n",
    "def main():\n",
    "    print(\"Enter the file path of the CSV file:\")\n",
    "    file_path = input()\n",
    "\n",
    "    print(\"Enter the column name to convert to categorical:\")\n",
    "    column_name = input()\n",
    "\n",
    "    print(\"Enter the category order as a comma-separated list:\")\n",
    "    category_order = input().split(',')\n",
    "\n",
    "    df_sorted = convert_column_to_categorical(file_path, column_name, category_order)\n",
    "\n",
    "    print(\"\\nSorted DataFrame:\")\n",
    "    print(df_sorted)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "e1f0debf-f048-4b64-a135-68b4c4256241",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the file path of the CSV file:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " /home/jovyan/work/sales_data.csv\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Question.10 Write a Python program that reads a CSV file containing sales data for different products and\n",
    "#visualizes the data using a stacked bar chart to show the sales of each product category over time. The\n",
    "#program should prompt the user to enter the file path and display the chart.\n",
    "#Answer.10 \n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def visualize_sales_data(file_path):\n",
    "    # Read the CSV file into a DataFrame\n",
    "    df = pd.read_csv(file_path)\n",
    "\n",
    "    # Convert the 'Date' column to datetime format\n",
    "    df['Date'] = pd.to_datetime(df['Date'])\n",
    "\n",
    "    # Group the data by 'Date' and 'Product Category' and calculate the total sales for each category on each date\n",
    "    sales_data = df.groupby(['Date', 'Product Category'])['Sales'].sum().unstack()\n",
    "\n",
    "    # Plot the stacked bar chart\n",
    "    sales_data.plot(kind='bar', stacked=True, figsize=(10, 6))\n",
    "    plt.xlabel('Date')\n",
    "    plt.ylabel('Sales')\n",
    "    plt.title('Sales Data by Product Category over Time')\n",
    "    plt.legend(title='Product Category', bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "\n",
    "    # Show the chart\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n",
    "\n",
    "def main():\n",
    "    print(\"Enter the file path of the CSV file:\")\n",
    "    file_path = input()\n",
    "\n",
    "    visualize_sales_data(file_path)\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2ad78df7-6d3e-4af5-8d96-9aed4653cbd4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the file path of the CSV file containing the student data:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " /home/jovyan/work/student_data.csv\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Score: 83.5\n",
      "Median Score: 85.0\n",
      "Mode Score: 85\n"
     ]
    }
   ],
   "source": [
    "#Question.11 You are given a CSV file containing student data that includes the student ID and their test score. Write\n",
    "#a Python program that reads the CSV file, calculates the mean, median, and mode of the test scores, and\n",
    "#displays the results in a table.\n",
    "#The program should do the following :\n",
    "#I Prompt the user to enter the file path of the CSV file containing the student dataR\n",
    "#I Read the CSV file into a Pandas DataFrameR\n",
    "#I Calculate the mean, median, and mode of the test scores using Pandas toolsR\n",
    "#I Display the mean, median, and mode in a table.\n",
    "#Assume the CSV file contains the following columnsM\n",
    "#I Student ID: The ID of the studentR\n",
    "#I Test Score: The score of the student's test.\n",
    "#Example usage of the program:\n",
    "#Enter the file path of the CSV file containing the student data: student_data.csv\n",
    "#+-----------+--------+\n",
    "#| Statistic | Value |\n",
    "#+-----------+--------+\n",
    "#| Mean | 79.6 |\n",
    "#| Median | 82 |\n",
    "#| Mode | 85, 90 |\n",
    "#+-----------+--------+\n",
    "#Assume that the CSV file student_data.csv contains the following data:\n",
    "#Student ID,Test Score\n",
    "#1,85\n",
    "#2,90\n",
    "#3,80\n",
    "#4,75\n",
    "#5,85\n",
    "#6,82\n",
    "#7,78\n",
    "#8,85\n",
    "#9,90\n",
    "#10,85\n",
    "#The program should calculate the mean, median, and mode of the test scores and display the results\n",
    "#in a table.\n",
    "#Answer.11 : \n",
    "import pandas as pd\n",
    "\n",
    "def calculate_statistics(file_path):\n",
    "    # Read the CSV file into a DataFrame\n",
    "    df = pd.read_csv(file_path)\n",
    "\n",
    "    # Calculate the mean, median, and mode of the test scores\n",
    "    mean_score = df['Test Score'].mean()\n",
    "    median_score = df['Test Score'].median()\n",
    "    mode_score = df['Test Score'].mode()\n",
    "\n",
    "    return mean_score, median_score, mode_score\n",
    "\n",
    "def main():\n",
    "    print(\"Enter the file path of the CSV file containing the student data:\")\n",
    "    file_path = input()\n",
    "\n",
    "    mean_score, median_score, mode_score = calculate_statistics(file_path)\n",
    "\n",
    "    print(\"Mean Score:\", mean_score)\n",
    "    print(\"Median Score:\", median_score)\n",
    "    print(\"Mode Score:\", ', '.join(map(str, mode_score)))\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f73b938f-ba02-450e-a444-fd3ed219dd8f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
