{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0481f129-b134-4360-af3c-a95d34a8d226",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Week.6 Assignment.1 \n",
    "#Mysql Assignment \n",
    "#Question.1 What is a database? Differentiate between SQL and NoSQL databases. \n",
    "#Answer.1 A database is a structured collection of data that is organized and stored in a way that allows for efficient \n",
    "#retrieval, manipulation, and management of information. It serves as a central repository for storing, managing, and \n",
    "#organizing data, making it easy to access and analyze for various purposes.\n",
    "#differences between SQL and NoSQL databases are as follows : \n",
    "#SQL databases are relational, and NoSQL databases are non-relational.\n",
    "#SQL databases use structured query language (SQL) and have a predefined schema. NoSQL databases have dynamic schemas for\n",
    "#unstructured data.\n",
    "#SQL databases are vertically scalable, while NoSQL databases are horizontally scalable.\n",
    "#SQL databases are table-based, while NoSQL databases are document, key-value, graph, or wide-column stores.\n",
    "#SQL databases are better for multi-row transactions, while NoSQL is better for unstructured data like documents or JSON."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b87af171-d4b1-44b1-b8c5-e4b8e0f447a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.2 What is DDL? Explain why CREATE, DROP, ALTER, and TRUNCATE are used with an example.\n",
    "#Answer.2 Data Definition Language (DDL) is a subset of SQL (Structured Query Language) used for defining and managing \n",
    "#the structure of a database. It is a set of commands that allow users to create, modify, and delete database objects such \n",
    "#as tables, indexes, views, and schemas. DDL statements are responsible for defining the database's logical and physical\n",
    "#structure and are typically used by database administrators and developers during database setup and maintenance.\n",
    "#Command-1 :\n",
    "#CREATE :\n",
    "#This command is used to create a new table in SQL. The user has to give information like table name, column names, and their\n",
    "#datatypes.\n",
    "\n",
    "#Syntax –\n",
    "\n",
    "#CREATE TABLE table_name\n",
    "#(\n",
    "#column_1 datatype,\n",
    "#column_2 datatype,\n",
    "#column_3 datatype,\n",
    "#....\n",
    "#);\n",
    "#Example –\n",
    "#We need to create a table for storing Student information of a particular College. Create syntax would be as below.\n",
    "\n",
    "#CREATE TABLE Student_info\n",
    "#(\n",
    "#College_Id number(2),\n",
    "#College_name varchar(30),\n",
    "#Branch varchar(10)\n",
    "#);\n",
    "#Command-2 :\n",
    "#DROP :\n",
    "#This command is used to remove an existing table along with its structure from the Database.\n",
    "\n",
    "#Syntax –\n",
    "#Syntax to drop an existing table.\n",
    "\n",
    "#DROP TABLE table_name;\n",
    "#Example –\n",
    "#If the College Authority wants to change their Database by deleting the Student_info Table. \n",
    "\n",
    "#DROP TABLE Student_info;\n",
    "\n",
    "#Command-3 :\n",
    "#ALTER :\n",
    "#This command is used to add, delete or change columns in the existing table. The user needs to know the existing table name \n",
    "#and can do add, delete or modify tasks easily.\n",
    "\n",
    "#Syntax –\n",
    "#Syntax to add a column to an existing table.\n",
    "\n",
    "#ALTER TABLE table_name\n",
    "#ADD column_name datatype;\n",
    "#Example –\n",
    "#In our Student_info table, we want to add a new column for CGPA. The syntax would be as below as follows.\n",
    "\n",
    "#ALTER TABLE Student_info\n",
    "#ADD CGPA number;\n",
    "\n",
    "#Command-4 :\n",
    "#TRUNCATE :\n",
    "#This command is used to remove all rows from the table, but the structure of the table still exists.\n",
    "\n",
    "#Syntax –\n",
    "#Syntax to remove an existing table.\n",
    "\n",
    "#TRUNCATE TABLE table_name;\n",
    "#Example –\n",
    "#The College Authority wants to remove the details of all students for new batches but wants to keep the table structure. \n",
    "#The command they can use is as follows.\n",
    "#TRUNCATE TABLE Student_info;\n",
    "\n",
    "#Command-4 :\n",
    "#DROP :\n",
    "#This command is used to remove an existing table along with its structure from the Database.\n",
    "\n",
    "#Syntax –\n",
    "#Syntax to drop an existing table.\n",
    "\n",
    "#DROP TABLE table_name;\n",
    "#Example –\n",
    "#If the College Authority wants to change their Database by deleting the Student_info Table. \n",
    "\n",
    "#DROP TABLE Student_info;\n",
    "\n",
    "#Command -5\n",
    "\n",
    "#RENAME:\n",
    "\n",
    "#It is possible to change name of table with or without data in it using simple RENAME command.\n",
    "\n",
    "#We can rename any table object at any point of time.\n",
    "\n",
    "#Syntax –\n",
    "\n",
    "#RENAME TABLE <Table Name> To <New_Table_Name>;\n",
    "#Example:\n",
    "\n",
    "#If you want to change the name of the table from Employee to Emp we can use rename command as \n",
    "\n",
    "#RENAME TABLE Employee To EMP;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2344ef3c-c9d0-4041-be26-a3e9002a18fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.3 What is DML? Explain INSERT, UPDATE, and DELETE with an example.\n",
    "#Answer.3 ML stands for Data Manipulation Language, and it is a subset of SQL (Structured Query Language) used for\n",
    "#managing the data within a database. DML commands allow users to insert, update, and delete data from the database tables.\n",
    "#Unlike DDL (Data Definition Language), which deals with defining the database structure, DML is focused on handling the\n",
    "#actual data within the database.\n",
    "#DML is a way to inform a database precisely what we want it to do by conversing in a manner that it has been built to \n",
    "#comprehend from the scratch. When it comes to interacting within existing data, whether adding, moving, or deleting data, \n",
    "#it provides a convenient way to do so.\n",
    "#INSERT Command –\n",
    "#This command is used to enter the information or values into a row. We can connect one or more records to a single table \n",
    "#within a repository using this instruction. This is often used to connect an unused tag to the documents.\n",
    "#Syntax :\n",
    "#INSERT INTO <table_name> ('column_name1' <datatype>, 'column_name2' <datatype>)\n",
    "\n",
    "#VALUES ('value1', 'value2'); \n",
    "\n",
    "#Example :\n",
    "\n",
    "#INSERT INTO students ('stu_id' int, 'stu_name' varchar(20), 'city' varchar(20))\n",
    "\n",
    "#VALUES ('1', 'Nirmit', 'Gorakhpur');\n",
    "\n",
    "#UPDATE Command –\n",
    "#This command is used to alter existing table records. Within a table, it modifies data from one or more records. This command \n",
    "#is used to alter the data which is already present in a table.\n",
    "#Syntax :\n",
    "\n",
    "#UPDATE <table_name>\n",
    "\n",
    "#SET <column_name = value>\n",
    "\n",
    "#WHERE condition; \n",
    "#Example :\n",
    "\n",
    "#UPDATE students\n",
    "\n",
    "#SET due_fees = 20000\n",
    "\n",
    "#WHERE stu_name = 'Mini';\n",
    "\n",
    "#DELETE Command –\n",
    "#It deletes all archives from a table. This command is used to erase some or all of the previous table’s records. If we do \n",
    "#not specify the ‘WHERE’ condition then all the rows would be erased or deleted.\n",
    "#Syntax :\n",
    "\n",
    "#DELETE FROM <table_name>\n",
    "\n",
    "#WHERE <condition>; \n",
    "#Example :\n",
    "\n",
    "#DELETE FROM students\n",
    "\n",
    "#WHERE stu_id = '001'; "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "04b7b85c-ae20-4959-9963-2410b6a49c4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.4 What is DQL? Explain SELECT with an example.\n",
    "#Answer.4  DQL stands for Data Query Language, and it is a subset of SQL (Structured Query Language) used for querying and \n",
    "#retrieving data from a database. DQL commands, primarily the SELECT statement, allow users to retrieve specific data from \n",
    "#one or more tables within a database.\n",
    "\n",
    "#The SELECT statement is one of the fundamental and most commonly used DQL commands. It allows users to specify the columns \n",
    "#they want to retrieve from a table and apply conditions to filter and sort the data.\n",
    "\n",
    "#Syntax of the SELECT statement: \n",
    " #SELECT <column-list>FROM<table-name>; \n",
    "\n",
    "#Example : \n",
    "#SELECT name FROM fruits;\n",
    "\n",
    "#This SELECT query will retrieve the \"name\" column from the \"fruits\" table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9591191-6994-48f1-89f4-ef1c98713f67",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.5 Explain Primary Key and Foreign Key.\n",
    "#Answer.5 Primary Key:\n",
    "#A Primary Key is a unique identifier for each record (row) in a database table. It uniquely identifies each row in the\n",
    "#table and ensures that there are no duplicate records. A Primary Key is used to enforce data integrity and enable efficient \n",
    "#data retrieval.\n",
    "#Characteristics of a Primary Key:\n",
    "\n",
    "#Each table can have only one Primary Key.\n",
    "#The Primary Key must contain unique values for each record in the table.\n",
    "#A Primary Key column cannot have NULL values, meaning it must have a value for every record.\n",
    "#The values in the Primary Key column should not change over time (immutable).\n",
    "#Example:\n",
    "#Consider a table named \"employees\" with columns: \"employee_id,\" \"name,\" \"department,\" and \"email.\" The \"employee_id\" is \n",
    "#uniquely assigned to each employee and can be used as the Primary Key:\n",
    "\n",
    "#employee_id | name       | department  | email\n",
    "#----------------------------------------------\n",
    "#101         | John Doe   | HR          | john@gmail.com\n",
    "#102         | Jane Smith | IT          | jane@gmail.com\n",
    "#103         | Mike Brown | Sales       | mike@gmail.com\n",
    "#In this example, the \"employee_id\" column serves as the Primary Key because it uniquely identifies each employee record.\n",
    "\n",
    "#Foreign Key:\n",
    "#A Foreign Key is a column or a set of columns in a table that establishes a link between two tables. It creates a \n",
    "#relationship between the data in one table and the data in another table. The Foreign Key in one table refers to the \n",
    "#Primary Key of another table, creating a parent-child relationship between the two tables.\n",
    "\n",
    "#Characteristics of a Foreign Key:\n",
    "\n",
    "#A table can have multiple Foreign Keys, depending on its relationships with other tables.\n",
    "#The Foreign Key column in one table must match the data type of the Primary Key column in the related table.\n",
    "#The values in the Foreign Key column must exist in the Primary Key column of the related table (except for NULL values, which\n",
    "#represent optional relationships).\n",
    "#Example:\n",
    "#Consider two tables, \"employees\" and \"departments.\" The \"departments\" table has a Primary Key \"department_id,\" which uniquely\n",
    "#identifies each department. The \"employees\" table has a Foreign Key \"department_id\" that references the \"department_id\" in\n",
    "#the \"departments\" table:\n",
    "\n",
    "#department_id | department_name\n",
    "#-------------------------------\n",
    "#1             | HR\n",
    "#2             | IT\n",
    "#3             | Sales\n",
    "\n",
    "#employees table:\n",
    "\n",
    "#employee_id | name       | department_id | email\n",
    "#----------------------------------------------\n",
    "#101         | John Doe   | 1             | john@gmail.com\n",
    "#102         | Jane Smith | 2             | jane@gmail.com\n",
    "#103         | Mike Brown | 3             | mike@gmail.com\n",
    "#In this example, the \"department_id\" column in the \"employees\" table serves as a Foreign Key, referencing the \"department_id\"\n",
    "#column in the \"departments\" table. This creates a relationship between employees and their respective departments. The Foreign\n",
    "#Key ensures that an employee's department must exist in the \"departments\" table, maintaining referential integrity.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "16ead9c1-e975-4ed2-a0f3-ff55729b83d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.6 Write a python code to connect MySQL to python. Explain the cursor() and execute() method.\n",
    "#Answer.6 Python code to connect MySQL to python : \n",
    "\n",
    "#import mysql.connector\n",
    "\n",
    "# Connect to MySQL\n",
    "#conn = mysql.connector.connect(\n",
    "    #host=\"localhost\",\n",
    "    #user=\"abc\",\n",
    "    #password=\"password\",\n",
    "    #database=\"test_1\"\n",
    "#)\n",
    "\n",
    "#Explanation of cursor() and execute() methods:\n",
    "\n",
    "#cursor() method:\n",
    "#The cursor() method creates a cursor object that allows you to interact with the MySQL database. The cursor is used to\n",
    "#execute SQL statements and manage the result sets returned by the database. It acts as a pointer or handle to the database, \n",
    "#enabling you to perform various database operations.\n",
    "#Syntax : \n",
    "#cursor = connection.cursor()\n",
    "#import mysql.connector\n",
    "\n",
    "#conn = mysql.connector.connect(\n",
    "    #host=\"localhost\",\n",
    "    #user=\"abc\",\n",
    "    #password=\"password\",\n",
    "    #database=\"test2\"\n",
    "#)\n",
    "\n",
    "\n",
    "#cursor = conn.cursor()\n",
    "\n",
    "#query = \"SELECT * FROM employees\"\n",
    "#cursor.execute(query)\n",
    "\n",
    "\n",
    "#result = cursor.fetchall()\n",
    "#for row in result:\n",
    "    #print(row)\n",
    "\n",
    "\n",
    "#conn.commit()\n",
    "#cursor.close()\n",
    "#conn.close()\n",
    "\n",
    "\n",
    "#execute() method:\n",
    "#The execute() method is used to execute SQL statements (queries or commands) on the database. It takes an SQL query as its \n",
    "#parameter and sends it to the MySQL server for execution. The result of the execution depends on the type of SQL statement:\n",
    "\n",
    "#Syntax  : \n",
    "#cursor.execute(sql_query, parameters=None)\n",
    "\n",
    "#Example :\n",
    "#import mysql.connector\n",
    "#conn = mysql.connector.connect(\n",
    "    #host=\"localhost\",\n",
    "    #user=\"abc\",\n",
    "    #password=\"password\",\n",
    "    #database=\"test_2\"\n",
    "#)\n",
    "\n",
    "#cursor = conn.cursor()\n",
    "\n",
    "\n",
    "#query = \"CREATE TABLE IF NOT EXISTS employees (id INT PRIMARY KEY, name VARCHAR(100), department VARCHAR(50))\"\n",
    "#cursor.execute(query)\n",
    "#conn.commit()\n",
    "#cursor.close()\n",
    "#conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8542670b-21fd-4940-90f9-4fa5c948e226",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.7 Give the order of execution of SQL clauses in an SQL query.\n",
    "#Answer.7 the order of execution of SQL clauses in an SQL query are as follows : \n",
    "#SELECT\n",
    "#FROM \n",
    "#JOIN\n",
    "#GROUP BY\n",
    "#HAVING\n",
    "#ORDER BY"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
