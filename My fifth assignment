{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "54aded7d-47bc-4152-afc0-5aa3c3c8e163",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name of Vehicle: Honda CB500F\n",
      "Max Speed: 180\n",
      "Average Speed: 120\n"
     ]
    }
   ],
   "source": [
    "#Question.1 Create a vehicle class with an init method having instance variables as name_of_vehicle , max_speed and \n",
    "#average_of_vehicle\n",
    "#Answer.1 :\n",
    "class vehicle :\n",
    "    def __init__(self , name_of_vehicle , max_speed , average_of_vehicle) : \n",
    "        #instance variables\n",
    "        self.name_of_vehicle = name_of_vehicle\n",
    "        self.max_speed = max_speed\n",
    "        self.average_of_vehicle = average_of_vehicle\n",
    "#Example : \n",
    "bike = vehicle('Honda CB500F' , 180 , 120)\n",
    "print(\"Name of Vehicle:\", bike.name_of_vehicle)\n",
    "print(\"Max Speed:\", bike.max_speed)\n",
    "print(\"Average Speed:\", bike.average_of_vehicle)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3324b50a-4039-47ac-b630-159a82993ca8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tesla Model S - Seating Capacity : 5\n"
     ]
    }
   ],
   "source": [
    "#Question.2 Create a child class car from the vehicle class created in ques.1 ,which will inherit the vehicle class .\n",
    "#Create a method named seating_capacity which takes capacity as an argument and returns the name of the vehicle and its \n",
    "#seating capacity\n",
    "#Answer.2 : \n",
    "class car(vehicle) :\n",
    "    def seating_capacity(self , capacity) : \n",
    "        return f'{self.name_of_vehicle} - Seating Capacity : {capacity}'\n",
    "# Example :\n",
    "car1 = car(\"Tesla Model S\", 250, 180)\n",
    "capacity = 5\n",
    "result = car1.seating_capacity(capacity)\n",
    "print(result)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "8c9e14c7-c45c-48d3-8210-09208fdfb9b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Method 1 from ParentClass1\n",
      "Method 2 from ParentClass2\n",
      "Method 3 from ChildClass\n"
     ]
    }
   ],
   "source": [
    "#Question.3 What is multiple inheritance ? Write a python code to demonstrate multiple inheritance \n",
    "#Answer.3 : Multiple inheritance in Python refers to a type of inheritance that allows a class to inherit attributes \n",
    "#and methods from more than one parent class. It allows a class to inherit characteristics from multiple base classes,\n",
    "#creating a hierarchy of class relationships.\n",
    "#In Python, when a class inherits from multiple parent classes, it is said to have multiple inheritance. This means that\n",
    "#the child class inherits attributes and methods from all of its parent classes.\n",
    "#Demonstration : \n",
    "class ParentClass1:\n",
    "    def method1(self):\n",
    "        print(\"Method 1 from ParentClass1\")\n",
    "\n",
    "class ParentClass2:\n",
    "    def method2(self):\n",
    "        print(\"Method 2 from ParentClass2\")\n",
    "\n",
    "class ChildClass(ParentClass1, ParentClass2):\n",
    "    def method3(self):\n",
    "        print(\"Method 3 from ChildClass\")\n",
    "\n",
    "# Example :\n",
    "child_obj = ChildClass()\n",
    "child_obj.method1()  # Access method from ParentClass1\n",
    "child_obj.method2()  # Access method from ParentClass2\n",
    "child_obj.method3()  # Access method from ChildClass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "bf4c0ca1-a36f-4329-bf67-ab267d086983",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Account Number: 123456789\n",
      "Empty Account Number: No account number available\n",
      "Invalid account number\n",
      "Updated Account Number: 123456789\n",
      "Invalid account number\n",
      "Initial Balance: 0\n",
      "Balance after deposit: 1000\n",
      "Invalid deposit amount\n",
      "Balance after withdrawal: 500\n",
      "Insufficient funds\n",
      "Invalid withdrawal amount\n"
     ]
    }
   ],
   "source": [
    "#Question.4 What are getter and setter in python ? Create a class and create a getter and a setter method in this class\n",
    "#Answer.4 In Python, getter and setter methods are used to encapsulate the access and modification of \n",
    "#class attributes (variables) within a class. They provide controlled access to the attributes by allowing the\n",
    "#programmer to define how attribute values are retrieved and modified.\n",
    "#Getter: A method that allows you to access an attribute in a given class. \n",
    "#Setter: A method that allows you to set or mutate the value of an attribute in a class.\n",
    "class BankAccount:\n",
    "    def __init__(self, account_number, balance=0):\n",
    "        self._account_number = account_number\n",
    "        self._balance = balance\n",
    "\n",
    "    def get_account_number(self):\n",
    "        if self._account_number:\n",
    "            return self._account_number\n",
    "        else:\n",
    "            return \"No account number available\"\n",
    "\n",
    "    def set_account_number(self, account_number):\n",
    "        if account_number.isdigit() and len(account_number) == 10:\n",
    "            self._account_number = account_number\n",
    "        else:\n",
    "            print(\"Invalid account number\")\n",
    "\n",
    "    def get_balance(self):\n",
    "        return self._balance\n",
    "\n",
    "    def deposit(self, amount):\n",
    "        if amount > 0:\n",
    "            self._balance += amount\n",
    "        else:\n",
    "            print(\"Invalid deposit amount\")\n",
    "\n",
    "    def withdraw(self, amount):\n",
    "        if amount > 0:\n",
    "            if self._balance >= amount:\n",
    "                self._balance -= amount\n",
    "            else:\n",
    "                print(\"Insufficient funds\")\n",
    "        else:\n",
    "            print(\"Invalid withdrawal amount\")\n",
    "\n",
    "# Example usage:\n",
    "account = BankAccount(\"123456789\")\n",
    "print(\"Account Number:\", account.get_account_number())  # Output: 123456789\n",
    "\n",
    "empty_account = BankAccount(\"\")\n",
    "print(\"Empty Account Number:\", empty_account.get_account_number())  # Output: No account number available\n",
    "\n",
    "account.set_account_number(\"987654321\")\n",
    "print(\"Updated Account Number:\", account.get_account_number())  # Output: 987654321\n",
    "\n",
    "account.set_account_number(\"abc123\")  # Output: Invalid account number\n",
    "\n",
    "print(\"Initial Balance:\", account.get_balance())  # Output: 0\n",
    "\n",
    "account.deposit(1000)\n",
    "print(\"Balance after deposit:\", account.get_balance())  # Output: 1000\n",
    "\n",
    "account.deposit(-500)  # Output: Invalid deposit amount\n",
    "\n",
    "account.withdraw(500)\n",
    "print(\"Balance after withdrawal:\", account.get_balance())  # Output: 500\n",
    "\n",
    "account.withdraw(1000)  # Output: Insufficient funds\n",
    "\n",
    "account.withdraw(-200)  # Output: Invalid withdrawal amount\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a8df3eec-774c-436c-9416-8c445dbf2f79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Inside Parent\n",
      "Inside Child\n"
     ]
    }
   ],
   "source": [
    "#Question.5 What is method overriding in python ? Write a python code to demonstrate method overriding .\n",
    "#Answer.5 Method overriding is an ability of any object-oriented programming that allows a subclass or \n",
    "#child class to provide a specific implementation of a method that is already provided by one of its super-classes\n",
    "#or parent classes. When a method in a subclass has the same name, same parameters or signature and same \n",
    "#return type(or sub-type) as a method in its super-class, then the method in the subclass is said to override the\n",
    "#method in the super-class.\n",
    "\n",
    "# Python program to demonstrate \n",
    "# method overriding\n",
    "  \n",
    "# Defining parent class\n",
    "class Parent():\n",
    "      \n",
    "    # Constructor\n",
    "    def __init__(self):\n",
    "        self.value = \"Inside Parent\"\n",
    "          \n",
    "    # Parent's show method\n",
    "    def show(self):\n",
    "        print(self.value)\n",
    "          \n",
    "# Defining child class\n",
    "class Child(Parent):\n",
    "      \n",
    "    # Constructor\n",
    "    def __init__(self):\n",
    "        self.value = \"Inside Child\"\n",
    "          \n",
    "    # Child's show method\n",
    "    def show(self):\n",
    "        print(self.value)\n",
    "        \n",
    "# Driver's code\n",
    "obj1 = Parent()\n",
    "obj2 = Child()\n",
    "  \n",
    "obj1.show()\n",
    "obj2.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d398bc5-91fe-4ae4-8664-99ba4c8151af",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
