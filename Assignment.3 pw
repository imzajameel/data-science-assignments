{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "54393bfd-9c42-4476-9afb-4d37d3330ca7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]\n"
     ]
    }
   ],
   "source": [
    "#Question.1 which keyword is used to create a function ? create a function to return a list of odd numbers in the \n",
    "#range of 1 to 25.\n",
    "#Answer.1 def keyword is used to create a function in python.\n",
    "#Function :\n",
    "def odd_numbers() :\n",
    "    odd_list = []\n",
    "    for i in range(1 , 25) :\n",
    "        if i % 2 != 0 :\n",
    "            odd_list.append(i)\n",
    "    return odd_list         \n",
    "odd_list = odd_numbers()\n",
    "print(odd_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d14a6aad-d199-412e-bd57-5ddc357952ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello\n",
      "Welcome\n",
      "to\n",
      "pwskills\n",
      "a : data_science\n",
      "b : machine_learning\n",
      "c : deep_learning\n"
     ]
    }
   ],
   "source": [
    "#Question.2 Why *args and **kwargs are used in some fuctions ? create a function each for *args and **kwargs\n",
    "#to demonstrate their use\n",
    "#Answer.2 In Python , *args and **kwargs are special syntaxes used in function definitions to handle a variable number of\n",
    "#arguments when we are unsure about the number of arguments to pass in the function.Here's what they represent :\n",
    "#1.*args : It stands for 'arguments' and is used to pass a variable number of non-keyworded arguments to a function.When *args \n",
    "#is used in a function definition , it allows the function to acccept any number of positional arguments ,which \n",
    "#are then accessible as a tuple within the the function.\n",
    "#2. **kwargs : It stands for \"keyword arguments\" and is used to pass  a variable number of keyworded arguments(key-value \n",
    "#pairs) to a function.When **kwargs is used in a funcion definition ,it allows the function to accept any number of keyword\n",
    "#arguments, which is then accessible as a dictionary within the function.\n",
    "\n",
    "# *args and *kwargs provides can be useful when we don't know in advance how many arguments will be passed to a function\n",
    "\n",
    "#function demonstrating the use of *args : \n",
    "def func1(*args) : \n",
    "    for arg in args : \n",
    "        print(arg)\n",
    "func1('Hello' , 'Welcome' ,'to', 'pwskills')\n",
    "\n",
    "#function demonstrating the use of **kwargs \n",
    "def func2(**kwargs) : \n",
    "    for key, value in kwargs.items() : \n",
    "        print(f'{key} : {value}')\n",
    "func2(a = 'data_science' , b = 'machine_learning' , c = 'deep_learning')        \n",
    "#Note : args and kwargs are NOT keywords ,they are for convention , we can use any name in their place,\n",
    "#but it is a must to put an asterisk(*) before the name which we are using at the place of args and to put double asterisk(**)\n",
    "#before the name which we are  using at the place of kwargs "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a6f0a758-4742-4934-834f-ece5936ede5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "4\n",
      "6\n",
      "8\n",
      "10\n"
     ]
    }
   ],
   "source": [
    "#Question.3 What is an iterator in python ? Name the method used to initialise the iterator object and the method used for \n",
    "#iteration.Use these methods to print the first five of the given list[2,4,6,8,10,12,14,16,18,20] \n",
    "#Answer.3 An iterator in Python is an object that is used to iterate over iterable objects like lists,tuples,dicts, and sets.\n",
    "#The Python iterators object is initialized using the iter() method.It uses next() method for iteration.\n",
    "my_list = [2,4,6,8,10,12,14,16,18,20]\n",
    "#create an iterator object from the list.\n",
    "my_iterator = iter(my_list)\n",
    "#Use the next() function to retrieve the first five elements.\n",
    "for i in range(5) :\n",
    "    element = next(my_iterator)\n",
    "    print(element)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4f53ee7c-19d4-4175-8078-432ab9c5e627",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "1\n",
      "2\n",
      "3\n",
      "5\n",
      "8\n",
      "13\n",
      "21\n",
      "34\n"
     ]
    }
   ],
   "source": [
    "#Question.4 What is a generator function in python ? Why yield keyword is used ? Give an example of a generator function.\n",
    "#Answer.4 In Python, a genertor function is a special type of function that returns an iterator ,which can be use to generate \n",
    "#a sequence of values one at a time.It is defined using the 'yield' keyword istead of the 'return' keyword.When a genertor\n",
    "#function is called , it returns a generator object that can be iterated over to retrieve the values produced by the function\n",
    "\n",
    "#The 'yield' keyword is used in a generator function to pause the execution and yield a value back to the caller, Unlike the \n",
    "#return statement, 'yield' allows the function to be resumed from where it left off the next time it is called.This enables\n",
    "#the generator function to produce a sequence of values incrementally without having to generate them all at once,which can be \n",
    "#more memory-efficient.\n",
    "#Example of a generator function  :\n",
    "def fibonacci_generator() : \n",
    "    a , b = 0 , 1 \n",
    "    while True : \n",
    "        yield a \n",
    "        a , b = b , a+b \n",
    "fib_gen = fibonacci_generator()\n",
    "for _ in range(10) :\n",
    "    print(next(fib_gen))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "bd24d47d-2650-4127-a611-659970790540",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]\n"
     ]
    }
   ],
   "source": [
    "#Question.5 Create a generator function for prime numbers less than 1000.Use the next() method to print the first 20 prime\n",
    "#numbers.\n",
    "#Answer.5 :\n",
    "def is_prime(n) : \n",
    "    if n < 2 :\n",
    "        return False\n",
    "    for i in range(2 , int(n ** 0.5)+1) : \n",
    "        if n  % i == 0 : \n",
    "            return False\n",
    "    return True \n",
    "def prime_num_generator() : \n",
    "    num = 2\n",
    "    i = 1\n",
    "    while i < 1000 : \n",
    "        if is_prime(num) : \n",
    "            yield num\n",
    "        num += 1\n",
    "        i += 1\n",
    "prime_gen = prime_num_generator()\n",
    "first_20_prime = [next(prime_gen)  for i in range(20)]\n",
    "print(first_20_prime)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8673debe-325e-44f2-8bae-918d4e9bc529",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n",
      "1\n",
      "2\n",
      "3\n",
      "5\n",
      "8\n",
      "13\n",
      "21\n",
      "34\n"
     ]
    }
   ],
   "source": [
    "#Question.6 Write a python program to print the first 10 Fibonacci numbers using a while loop .\n",
    "#Answer.6 :\n",
    "def print_fibonacci() :\n",
    "    num1, num2 = 0, 1\n",
    "    count = 0\n",
    "    while count < 10 :\n",
    "        print(num1)\n",
    "        num1, num2 = num2 , num1 + num2\n",
    "        count += 1 \n",
    "print_fibonacci()        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "d5537c2e-f872-45a5-bd35-182a6e5dd2ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['p', 'w', 's', 'k', 'i', 'l', 'l', 's']\n"
     ]
    }
   ],
   "source": [
    "#Question.7 Write a list comprehension to iterate through the given string : 'pwskills'\n",
    "#Answer.7 :\n",
    "string = 'pwskills'\n",
    "my_list = [i for i in string]\n",
    "print(my_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cd878e88-e45a-415f-ab9c-ccf5ed54540b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "121 is a palindrome number\n",
      "124 is not a palindrome number\n"
     ]
    }
   ],
   "source": [
    "#Question.8 Write a python program to check whether a given number is palindrome or not using a while loop.\n",
    "#Answer.8 :\n",
    "def is_palindrome(number) : \n",
    "    temp = number\n",
    "    reverse = 0 \n",
    "    while temp > 0 : \n",
    "        digit = temp % 10 \n",
    "        reverse = (reverse* 10) + digit \n",
    "        temp = temp // 10\n",
    "    if number == reverse : \n",
    "        print(f'{number} is a palindrome number') \n",
    "    else : \n",
    "        print(f'{number} is not a palindrome number')\n",
    "number1 = 121\n",
    "is_palindrome(number1)\n",
    "number2 = 124\n",
    "is_palindrome(number2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2c902cd2-b351-4044-99de-261e8afe6661",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99]\n"
     ]
    }
   ],
   "source": [
    "#Question.9 Write a code to print odd numbers from 1 to 100 using list comprehension.\n",
    "#Answer.9 :\n",
    "odd_number = [i for i in range(1,101) if i % 2 != 0 ]\n",
    "print(odd_number)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08a0e103-0d10-49c2-b43b-f195b3359fc5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
