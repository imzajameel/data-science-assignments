{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "92bbd7c4-db31-4d74-8fad-8fa59d12d520",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.1 Explain why we have to use the Exception class while creating a Custom Exception.\n",
    "#Answer.1   When creating a custom exception in Python, it is recommended to inherit from the Exception class or any of its \n",
    "#subclasses. The Exception class is the base class for all exceptions in Python, and by inheriting from it, our custom \n",
    "#exception gains important characteristics and behaviors that are expected from an exception class. Here are a few reasons\n",
    "#why we should use the Exception class as the base class for custom exceptions:\n",
    "\n",
    "#Consistency and Compatibility: Inheriting from the Exception class ensures that our custom exception follows the established\n",
    "#exception hierarchy and behaves consistently with other built-in and standard library exceptions. It allows our custom\n",
    "#exception to be compatible with existing exception handling mechanisms and practices.\n",
    "\n",
    "#Standardized Exception Handling: Python provides built-in exception handling mechanisms, such as try-except blocks, that are\n",
    "#designed to work with exceptions derived from the Exception class. By inheriting from Exception, we can leverage these\n",
    "#standard exception handling techniques to catch and handle our custom exception in a consistent and predictable manner.\n",
    "\n",
    "#Clarity and Documentation: By using the Exception class, we clearly indicate that our custom class is intended to represent\n",
    "#an exception. It provides a semantic meaning that is immediately recognizable to other developers who may encounter our\n",
    "#code. Additionally, using the Exception class makes it easier to document and communicate the purpose of our custom exception\n",
    "#to others.\n",
    "\n",
    "#Standard Exception Attributes and Methods: The Exception class provides a set of attributes and methods that are commonly \n",
    "#used with exceptions. These include the args attribute to store additional information about the exception, the __str__()\n",
    "#method to generate a string representation of the exception, and the with_traceback() method to associate a traceback with the\n",
    "#exception. By inheriting from Exception, our custom exception can inherit and utilize these standard attributes and methods.\n",
    "\n",
    "#By inheriting from the Exception class, we ensure that our custom exception follows established conventions, maintains \n",
    "#compatibility with existing exception handling mechanisms, and benefits from the standard attributes and methods provided \n",
    "#by the base class. This promotes code clarity, consistency, and maintainability when working with exceptions in Python."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b5f38970-beff-4f09-9241-5b711c14d1a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Exception\n",
      "    TypeError\n",
      "        FloatOperation\n",
      "        MultipartConversionError\n",
      "    StopAsyncIteration\n",
      "    StopIteration\n",
      "    ImportError\n",
      "        ModuleNotFoundError\n",
      "        ZipImportError\n",
      "    OSError\n",
      "        ConnectionError\n",
      "            BrokenPipeError\n",
      "            ConnectionAbortedError\n",
      "            ConnectionRefusedError\n",
      "            ConnectionResetError\n",
      "                RemoteDisconnected\n",
      "        BlockingIOError\n",
      "        ChildProcessError\n",
      "        FileExistsError\n",
      "        FileNotFoundError\n",
      "        IsADirectoryError\n",
      "        NotADirectoryError\n",
      "        InterruptedError\n",
      "            InterruptedSystemCall\n",
      "        PermissionError\n",
      "        ProcessLookupError\n",
      "        TimeoutError\n",
      "        UnsupportedOperation\n",
      "        itimer_error\n",
      "        herror\n",
      "        gaierror\n",
      "        SSLError\n",
      "            SSLCertVerificationError\n",
      "            SSLZeroReturnError\n",
      "            SSLWantWriteError\n",
      "            SSLWantReadError\n",
      "            SSLSyscallError\n",
      "            SSLEOFError\n",
      "        Error\n",
      "            SameFileError\n",
      "        SpecialFileError\n",
      "        ExecError\n",
      "        ReadError\n",
      "        URLError\n",
      "            HTTPError\n",
      "            ContentTooShortError\n",
      "        BadGzipFile\n",
      "    EOFError\n",
      "        IncompleteReadError\n",
      "    RuntimeError\n",
      "        RecursionError\n",
      "        NotImplementedError\n",
      "            ZMQVersionError\n",
      "            StdinNotImplementedError\n",
      "        _DeadlockError\n",
      "        BrokenBarrierError\n",
      "        BrokenExecutor\n",
      "            BrokenThreadPool\n",
      "        SendfileNotAvailableError\n",
      "        ExtractionError\n",
      "        VariableError\n",
      "    NameError\n",
      "        UnboundLocalError\n",
      "    AttributeError\n",
      "        FrozenInstanceError\n",
      "    SyntaxError\n",
      "        IndentationError\n",
      "            TabError\n",
      "    LookupError\n",
      "        IndexError\n",
      "        KeyError\n",
      "            NoSuchKernel\n",
      "            UnknownBackend\n",
      "        CodecRegistryError\n",
      "    ValueError\n",
      "        UnicodeError\n",
      "            UnicodeEncodeError\n",
      "            UnicodeDecodeError\n",
      "            UnicodeTranslateError\n",
      "        UnsupportedOperation\n",
      "        JSONDecodeError\n",
      "        SSLCertVerificationError\n",
      "        Error\n",
      "        UnsupportedDigestmodError\n",
      "        IllegalMonthError\n",
      "        IllegalWeekdayError\n",
      "        ParserError\n",
      "        ClassNotFound\n",
      "        ClipboardEmpty\n",
      "        MessageDefect\n",
      "            NoBoundaryInMultipartDefect\n",
      "            StartBoundaryNotFoundDefect\n",
      "            CloseBoundaryNotFoundDefect\n",
      "            FirstHeaderLineIsContinuationDefect\n",
      "            MisplacedEnvelopeHeaderDefect\n",
      "            MissingHeaderBodySeparatorDefect\n",
      "            MultipartInvariantViolationDefect\n",
      "            InvalidMultipartContentTransferEncodingDefect\n",
      "            UndecodableBytesDefect\n",
      "            InvalidBase64PaddingDefect\n",
      "            InvalidBase64CharactersDefect\n",
      "            InvalidBase64LengthDefect\n",
      "            HeaderDefect\n",
      "                InvalidHeaderDefect\n",
      "                HeaderMissingRequiredValue\n",
      "                NonPrintableDefect\n",
      "                ObsoleteHeaderDefect\n",
      "                NonASCIILocalPartDefect\n",
      "                InvalidDateDefect\n",
      "        MacroToEdit\n",
      "        InvalidFileException\n",
      "        UnequalIterablesError\n",
      "        InvalidVersion\n",
      "        _InvalidELFFileHeader\n",
      "        InvalidWheelFilename\n",
      "        InvalidSdistFilename\n",
      "        InvalidSpecifier\n",
      "        InvalidMarker\n",
      "        UndefinedComparison\n",
      "        UndefinedEnvironmentName\n",
      "        InvalidRequirement\n",
      "            RequirementParseError\n",
      "        InvalidVersion\n",
      "    AssertionError\n",
      "    ArithmeticError\n",
      "        FloatingPointError\n",
      "        OverflowError\n",
      "        ZeroDivisionError\n",
      "            DivisionByZero\n",
      "            DivisionUndefined\n",
      "        DecimalException\n",
      "            Clamped\n",
      "            Rounded\n",
      "                Underflow\n",
      "                Overflow\n",
      "            Inexact\n",
      "                Underflow\n",
      "                Overflow\n",
      "            Subnormal\n",
      "                Underflow\n",
      "            DivisionByZero\n",
      "            FloatOperation\n",
      "            InvalidOperation\n",
      "                ConversionSyntax\n",
      "                DivisionImpossible\n",
      "                DivisionUndefined\n",
      "                InvalidContext\n",
      "    SystemError\n",
      "        CodecRegistryError\n",
      "    ReferenceError\n",
      "    MemoryError\n",
      "    BufferError\n",
      "    Warning\n",
      "        UserWarning\n",
      "            GetPassWarning\n",
      "            FormatterWarning\n",
      "        EncodingWarning\n",
      "        DeprecationWarning\n",
      "            ProvisionalWarning\n",
      "        PendingDeprecationWarning\n",
      "        SyntaxWarning\n",
      "        RuntimeWarning\n",
      "            ProactorSelectorThreadWarning\n",
      "            UnknownTimezoneWarning\n",
      "            PEP440Warning\n",
      "        FutureWarning\n",
      "            ProvisionalCompleterWarning\n",
      "        ImportWarning\n",
      "        UnicodeWarning\n",
      "        BytesWarning\n",
      "        ResourceWarning\n",
      "        DeprecatedTzFormatWarning\n",
      "        PkgResourcesDeprecationWarning\n",
      "    _OptionError\n",
      "    _Error\n",
      "    error\n",
      "    Verbose\n",
      "    Error\n",
      "    SubprocessError\n",
      "        CalledProcessError\n",
      "        TimeoutExpired\n",
      "    TokenError\n",
      "    StopTokenizing\n",
      "    ClassFoundException\n",
      "    EndOfBlock\n",
      "    TraitError\n",
      "    Error\n",
      "    Error\n",
      "        CancelledError\n",
      "        TimeoutError\n",
      "        InvalidStateError\n",
      "    _GiveupOnSendfile\n",
      "    error\n",
      "    Incomplete\n",
      "    TimeoutError\n",
      "    InvalidStateError\n",
      "    LimitOverrunError\n",
      "    QueueEmpty\n",
      "    QueueFull\n",
      "    Empty\n",
      "    Full\n",
      "    ArgumentError\n",
      "    ZMQBaseError\n",
      "        ZMQError\n",
      "            ContextTerminated\n",
      "            Again\n",
      "            InterruptedSystemCall\n",
      "        ZMQBindError\n",
      "        NotDone\n",
      "    PickleError\n",
      "        PicklingError\n",
      "        UnpicklingError\n",
      "    _Stop\n",
      "    ArgumentError\n",
      "    ArgumentTypeError\n",
      "    ConfigError\n",
      "        ConfigLoaderError\n",
      "            ArgumentError\n",
      "        ConfigFileNotFound\n",
      "    ConfigurableError\n",
      "        MultipleInstanceError\n",
      "    ApplicationError\n",
      "    error\n",
      "    TimeoutError\n",
      "    error\n",
      "    ReturnValueIgnoredError\n",
      "    KeyReuseError\n",
      "    UnknownKeyError\n",
      "    LeakedCallbackError\n",
      "    BadYieldError\n",
      "    ReturnValueIgnoredError\n",
      "    Return\n",
      "    InvalidPortNumber\n",
      "    error\n",
      "    LZMAError\n",
      "    RegistryError\n",
      "    _GiveupOnFastCopy\n",
      "    Error\n",
      "        NoSectionError\n",
      "        DuplicateSectionError\n",
      "        DuplicateOptionError\n",
      "        NoOptionError\n",
      "        InterpolationError\n",
      "            InterpolationMissingOptionError\n",
      "            InterpolationSyntaxError\n",
      "            InterpolationDepthError\n",
      "        ParsingError\n",
      "            MissingSectionHeaderError\n",
      "    NoIPAddresses\n",
      "    BadZipFile\n",
      "    LargeZipFile\n",
      "    BadEntryPoint\n",
      "    NoSuchEntryPoint\n",
      "    DuplicateKernelError\n",
      "    ErrorDuringImport\n",
      "    NotOneValueFound\n",
      "    CannotEval\n",
      "    OptionError\n",
      "    BdbQuit\n",
      "    Restart\n",
      "    ExceptionPexpect\n",
      "        EOF\n",
      "        TIMEOUT\n",
      "    PtyProcessError\n",
      "    FindCmdError\n",
      "    HomeDirError\n",
      "    ProfileDirError\n",
      "    IPythonCoreError\n",
      "        TryNext\n",
      "        UsageError\n",
      "        StdinNotImplementedError\n",
      "    InputRejected\n",
      "    GetoptError\n",
      "    ErrorToken\n",
      "    PrefilterError\n",
      "    AliasError\n",
      "        InvalidAliasError\n",
      "    Error\n",
      "        InterfaceError\n",
      "        DatabaseError\n",
      "            InternalError\n",
      "            OperationalError\n",
      "            ProgrammingError\n",
      "            IntegrityError\n",
      "            DataError\n",
      "            NotSupportedError\n",
      "    Warning\n",
      "    SpaceInInput\n",
      "    DOMException\n",
      "        IndexSizeErr\n",
      "        DomstringSizeErr\n",
      "        HierarchyRequestErr\n",
      "        WrongDocumentErr\n",
      "        InvalidCharacterErr\n",
      "        NoDataAllowedErr\n",
      "        NoModificationAllowedErr\n",
      "        NotFoundErr\n",
      "        NotSupportedErr\n",
      "        InuseAttributeErr\n",
      "        InvalidStateErr\n",
      "        SyntaxErr\n",
      "        InvalidModificationErr\n",
      "        NamespaceErr\n",
      "        InvalidAccessErr\n",
      "        ValidationErr\n",
      "    ValidationError\n",
      "    EditReadOnlyBuffer\n",
      "    _Retry\n",
      "    InvalidLayoutError\n",
      "    HeightIsUnknownError\n",
      "    ParserSyntaxError\n",
      "    InternalParseError\n",
      "    _PositionUpdatingFinished\n",
      "    SimpleGetItemNotFound\n",
      "    UncaughtAttributeError\n",
      "    HasNoContext\n",
      "    ParamIssue\n",
      "    _JediError\n",
      "        InternalError\n",
      "        WrongVersion\n",
      "        RefactoringError\n",
      "    OnErrorLeaf\n",
      "    InvalidPythonEnvironment\n",
      "    MessageError\n",
      "        MessageParseError\n",
      "            HeaderParseError\n",
      "            BoundaryError\n",
      "        MultipartConversionError\n",
      "        CharsetError\n",
      "    Error\n",
      "    HTTPException\n",
      "        NotConnected\n",
      "        InvalidURL\n",
      "        UnknownProtocol\n",
      "        UnknownTransferEncoding\n",
      "        UnimplementedFileMode\n",
      "        IncompleteRead\n",
      "        ImproperConnectionState\n",
      "            CannotSendRequest\n",
      "            CannotSendHeader\n",
      "            ResponseNotReady\n",
      "        BadStatusLine\n",
      "            RemoteDisconnected\n",
      "        LineTooLong\n",
      "    InteractivelyDefined\n",
      "    KillEmbedded\n",
      "    Error\n",
      "        NoSuchProcess\n",
      "            ZombieProcess\n",
      "        AccessDenied\n",
      "        TimeoutExpired\n",
      "    _Ipv6UnsupportedError\n",
      "    QueueEmpty\n",
      "    QueueFull\n",
      "    DebuggerInitializationError\n",
      "    ExpatError\n",
      "    Error\n",
      "        ProtocolError\n",
      "        ResponseError\n",
      "        Fault\n",
      "    ParseBaseException\n",
      "        ParseException\n",
      "        ParseFatalException\n",
      "            ParseSyntaxException\n",
      "    RecursiveGrammarException\n",
      "    ResolutionError\n",
      "        VersionConflict\n",
      "            ContextualVersionConflict\n",
      "        DistributionNotFound\n",
      "        UnknownExtra\n",
      "    _Error\n",
      "    UnableToResolveVariableException\n",
      "    InvalidTypeInArgsException\n"
     ]
    }
   ],
   "source": [
    "#Question.2 Write a python program to print Python Exception Hierarchy.\n",
    "#Answer.2  \n",
    "def print_exception_hierarchy(exception_class, indent=0):\n",
    "    print(' ' * indent + exception_class.__name__)\n",
    "    for subclass in exception_class.__subclasses__():\n",
    "        print_exception_hierarchy(subclass, indent + 4)\n",
    "\n",
    "# Print the exception hierarchy starting from the base Exception class\n",
    "print_exception_hierarchy(Exception)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1e1da600-696d-420d-9206-c1bd53bc19ba",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error: Cannot divide by zero\n",
      "Simple program for showing overflow error\n",
      "\n",
      "\n",
      "The exponential value is\n",
      "Can't store such a large value , it is an OverflowError : math range error \n"
     ]
    }
   ],
   "source": [
    "#Question.3 What errors are defined in the ArithmeticError class ? Explain any two , with an example.\n",
    "#Answer.3 The ArithmeticError class is a base class for arithmetic-related errors in Python. It itself doesn't define\n",
    "#any specific errors, but several built-in exceptions inherit from it to represent various arithmetic errors. Two examples\n",
    "#of such exceptions are ZeroDivisionError and OverflowError.\n",
    "\n",
    "#Example :\n",
    "\n",
    "#1.ZeroDivisionError:\n",
    "#ZeroDivisionError is raised when attempting to divide a number by zero. It indicates an arithmetic operation where the \n",
    "#denominator is zero, which is mathematically undefined.\n",
    "\n",
    "#Example.1 : \n",
    "\n",
    "try:\n",
    "    result = 10 / 0\n",
    "except ZeroDivisionError:\n",
    "    print(\"Error: Cannot divide by zero\")\n",
    "\n",
    "#2. In Python, OverflowError occurs when any operations like arithmetic operations or any other variable storing any\n",
    "#value above its limit then there occurs an overflow of values that will exceed it’s specified or already defined limit.\n",
    "\n",
    "#Example :\n",
    "import math\n",
    "try : \n",
    "    print(\"Simple program for showing overflow error\")\n",
    "    print(\"\\n\")\n",
    "    import math\n",
    "    print(\"The exponential value is\")\n",
    "    print(math.exp(1000))\n",
    "except OverflowError as e :\n",
    "    print(\"Can't store such a large value , it is an OverflowError : {} \".format(e))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "19231a22-5379-46ee-8bc4-5baf9b2798c2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error: Key not found in the dictionary\n",
      "Error: Index out of range\n"
     ]
    }
   ],
   "source": [
    "#Question.4 Why LookupError class is used ? Explain with an example KeyError and IndexError .\n",
    "#Answer.4 The LookupError class in Python is a base class for exceptions that occur when a key or index is not found \n",
    "#during a lookup operation. It provides a common base for more specific lookup-related exceptions, such as KeyError and\n",
    "#IndexError.\n",
    "\n",
    "#Example : \n",
    "\n",
    "#KeyError:\n",
    "#KeyError is raised when trying to access a dictionary using a key that does not exist in the dictionary.\n",
    "\n",
    "#Example of KeyError : \n",
    "\n",
    "dictionary = {'apple': 'red', 'banana': 'yellow', 'orange': 'orange'}\n",
    "try:\n",
    "    value = dictionary['grape']\n",
    "except KeyError:\n",
    "    print(\"Error: Key not found in the dictionary\")\n",
    "\n",
    "# IndexError:\n",
    "#IndexError is raised when trying to access a list, tuple, or string using an invalid index or slice that is out of range.\n",
    "\n",
    "#Example of IndexError : \n",
    "\n",
    "fruits = ['apple', 'banana', 'orange']\n",
    "try:\n",
    "    fruit = fruits[3]\n",
    "except IndexError:\n",
    "    print(\"Error: Index out of range\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "d68c22cc-d58f-4a94-bd4d-05f04aedf792",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error: Module not found or cannot be imported\n",
      "Error: Module not found\n"
     ]
    }
   ],
   "source": [
    "#Question.5 Explain ImportError . What is ModuleNotFoundError ? \n",
    "#Answer.5  ImportError is an exception that is raised when an import statement fails to find or load a module. It is a\n",
    "#built-in exception class in Python. When you try to import a module, Python searches for the module in a set of directories\n",
    "#known as the import search path. If the module is not found in any of these directories, an ImportError is raised.\n",
    "\n",
    "#Example : \n",
    " \n",
    "try:\n",
    "    import non_existent_module\n",
    "except ImportError:\n",
    "    print(\"Error: Module not found or cannot be imported\")\n",
    "    \n",
    "#this example, we attempt to import a module called non_existent_module, which does not exist. As a result,\n",
    "#an ImportError is raised. The exception is caught in the except block, and an appropriate error message is printed.    \n",
    "\n",
    "#On the other hand, ModuleNotFoundError is a subclass of ImportError introduced in Python 3.6. It is a more specific \n",
    "#exception that is raised when a module cannot be found during an import statement. It provides additional information\n",
    "#compared to ImportError and includes the name of the missing module in the error message.\n",
    "\n",
    "#Example:\n",
    "\n",
    "try:\n",
    "    import non_existent_module\n",
    "except ModuleNotFoundError:\n",
    "    print(\"Error: Module not found\")\n",
    "    \n",
    "#In this example, we use ModuleNotFoundError instead of ImportError to catch the exception. If the module non_existent_module\n",
    "#is not found, a ModuleNotFoundError is raised. The exception is caught in the except block, and an appropriate error message\n",
    "#is printed.\n",
    "\n",
    "#While ImportError is a more general exception that covers various import-related errors, ModuleNotFoundError provides\n",
    "#a more specific error message when a module cannot be found. It helps to differentiate between import errors and other types\n",
    "#of ImportError exceptions, making it easier to diagnose and resolve import-related issues.    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "74815cb4-c3a3-4db6-9297-8470954132fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "division by zero\n",
      "the index provided is not available ,it's an index error :  list index out of range\n"
     ]
    }
   ],
   "source": [
    "#Question.6 List down some best practices for exception handling in python.\n",
    "#Answer.6  :\n",
    "\n",
    "#1.Always use a specific exceptions.\n",
    "#Example.1 : \n",
    "try : \n",
    "    10/0\n",
    "except ZeroDivisionError as e  :\n",
    "    print(e)\n",
    "    \n",
    "#2.Always print a proper message.    \n",
    "#Example.2 : \n",
    "l = [1,2,3]\n",
    "try : \n",
    "    val_num3 = l[3]\n",
    "    print('The third value of the list' , val_num3)\n",
    "except IndexError as e : \n",
    "    print(\"the index provided is not available ,it's an index error : \" , e)\n",
    "    \n",
    "#3.Always try to lock your error.\n",
    "#Example : \n",
    "import logging\n",
    "logging.basicConfig(filename = 'error.log' , level = logging.ERROR)\n",
    "try : \n",
    "    10/0\n",
    "except ZeroDivisionError as e  :\n",
    "    logging.error(' Here , 0 is provided as denominator , which is a zero division error : {}'.format(e))\n",
    "    \n",
    "#4.Always avoid to write multiple exception handling.\n",
    "#Example : \n",
    "try :\n",
    "    a = 125 + 'imza'\n",
    "    print(a)\n",
    "except TypeError as e :\n",
    "    logging.error('Here, we are trying to add a string to an integer, Which is a type error : {} '.format(e))\n",
    "    \n",
    "#5.Clean up all the resources.\n",
    "try : \n",
    "    with open('test.txt12' , 'w') as f : \n",
    "        f.write('This is my first line in a file called \"test.txt12\"')\n",
    "except FileNotFoundError as e : \n",
    "    logging.error('I am handling file not found error : {}'.format(e))\n",
    "finally : \n",
    "    f.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
