# -*- coding: utf-8 -*-
"""Matplotlib new assignment.1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lRfyYccYuiRqVABVVSzoyCMJXeuuKKtW
"""

#Matplotlib Assignment
#Question.1 What is Matplotlib? Why is it used? Name five plots that can be plotted using the Pyplot module of Matplotlib.
#Answer.1 Matplotlib is a popular and widely-used data visualization library in Python. It provides a comprehensive set of functions for
#creating a wide range of static, animated, and interactive visualizations. Matplotlib is often used for creating graphs, charts, and plots to
#visualize data in a clear and informative manner.

#Some of the key features and uses of Matplotlib include:

#Data Visualization: Matplotlib allows you to create a variety of visualizations, ranging from simple line plots to complex 3D plots, histograms,
#scatter plots, bar charts, and more.

#Publication-Quality Graphics: It provides tools to customize every aspect of the plot, ensuring that the resulting graphics are of high
#quality and suitable for publication.

#Integration with Other Libraries: Matplotlib integrates well with other scientific computing libraries like NumPy and Pandas, making it easy to
#visualize data stored in these formats.

#Interactive Plots: Matplotlib supports various interactive backends, allowing you to create interactive plots that can be embedded in applications or
#websites.

#Support for Multiple Formats: You can save Matplotlib plots in various formats, including PNG, PDF, SVG, and more.

#Customization: Matplotlib offers extensive customization options for colors, labels, titles, legends, axes, and more.

#Support for Jupyter Notebooks: Matplotlib works seamlessly within Jupyter notebooks, making it convenient for interactive data exploration.

#Here are five types of plots that can be created using the pyplot module of Matplotlib:

#Line Plot: A basic plot that displays data points connected by straight lines. It is often used to show trends over time or continuous data.

#Bar Chart: A chart that represents data using rectangular bars. It is commonly used to compare categorical data.

#Histogram: A graphical representation of the distribution of numerical data. It is used to visualize the frequency or probability distribution of a dataset.

#Scatter Plot: A plot that displays individual data points as dots on a two-dimensional space. It is used to visualize the relationship between two variables.

#Pie Chart: A circular chart divided into sectors, where each sector represents a portion of the whole data. It is useful for displaying proportional or
#percentage data.

#Question.2 What is a scatter plot? Use the following code to generate data for x and y. Using this generated data
#plot a scatter plot.
#import numpy as np
#np.random.seed(3)
#x = 3 + np.random.normal(0, 2, 50)
#y = 3 + np.random.normal(0, 2, len(x))
#Note: Also add title, xlabel, and ylabel to the plot.
#Answer.2 A scatter plot is a type of data visualization that uses dots to represent the values obtained for two different variables - one plotted along
#the x-axis and the other plotted along the y-axis. Scatter plots are useful for visualizing the relationship between two continuous variables and identifying
#patterns or trends in the data.

#Here's the code to generate the scatter plot using the provided data and to add a title, xlabel, and ylabel:
import numpy as np
import matplotlib.pyplot as plt

np.random.seed(3)
x = 3 + np.random.normal(0, 2, 50)
y = 3 + np.random.normal(0, 2, len(x))

plt.figure(figsize=(8, 6))  # Set the figure size

# Create the scatter plot
plt.scatter(x, y, color='blue', alpha=0.7)  # 'alpha' controls transparency of points

# Add title and labels
plt.title('Scatter Plot of X and Y')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

# Show the plot
plt.show()

#Question.3 Why is the subplot() function used? Draw four line plots using the subplot() function.
#Use the following data:
#import numpy as np
#For line 1: x = np.array([0, 1, 2, 3, 4, 5]) and y = np.array([0, 100, 200, 300, 400, 500])
#For line 2: x = np.array([0, 1, 2, 3, 4, 5]) and y = np.array([50, 20, 40, 20, 60, 70])
#For line 3: x = np.array([0, 1, 2, 3, 4, 5]) and y = np.array([10, 20, 30, 40, 50, 60])
#For line 4: x = np.array([0, 1, 2, 3, 4, 5]) and y = np.array([200, 350, 250, 550, 450, 150])
#Answer.3 The subplot() function in Matplotlib is used to create multiple plots within a single figure.
#It helps organize multiple plots in a grid layout, making it easier to compare and visualize different datasets or
#visualizations simultaneously. The function takes three arguments: the number of rows, the number of columns, and
#the index of the current subplot.

#Here's how you can use the subplot() function to create four line plots using the provided data:
import numpy as np
import matplotlib.pyplot as plt

# Define the data for each line plot
x = np.array([0, 1, 2, 3, 4, 5])

y1 = np.array([0, 100, 200, 300, 400, 500])
y2 = np.array([50, 20, 40, 20, 60, 70])
y3 = np.array([10, 20, 30, 40, 50, 60])
y4 = np.array([200, 350, 250, 550, 450, 150])

# Create a 2x2 grid of subplots
plt.figure(figsize=(10, 8))  # Set the figure size

# Subplot 1
plt.subplot(2, 2, 1)
plt.plot(x, y1, marker='o')
plt.title('Line Plot 1')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

# Subplot 2
plt.subplot(2, 2, 2)
plt.plot(x, y2, marker='o')
plt.title('Line Plot 2')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

# Subplot 3
plt.subplot(2, 2, 3)
plt.plot(x, y3, marker='o')
plt.title('Line Plot 3')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

# Subplot 4
plt.subplot(2, 2, 4)
plt.plot(x, y4, marker='o')
plt.title('Line Plot 4')
plt.xlabel('X-axis')
plt.ylabel('Y-axis')

# Adjust layout and show the plots
plt.tight_layout()
plt.show()

#Question.4 What is a bar plot? Why is it used? Using the following data plot a bar plot and a horizontal bar plot.
#import numpy as np
#company = np.array(["Apple", "Microsoft", "Google", "AMD"])
#profit = np.array([3000, 8000, 1000, 10000])
#Answer.4 A bar plot is a type of data visualization that uses rectangular bars to represent data values. In a bar plot,
#the length or height of each bar corresponds to the value of the data it represents. Bar plots are commonly used to compare
#the values of different categories or groups and to show patterns or trends in data.

#Bar plots are used for various purposes, including:

#Comparison: Bar plots are effective for comparing the magnitude of values across different categories. They make it easy to
#visually compare the heights of the bars to understand which category has higher or lower values.

#Categorical Data: Bar plots are suitable for representing categorical data where each bar represents a category or group.
#They are often used to visualize data like sales, profits, frequencies, or counts for different categories.

#Trends and Patterns: Bar plots can reveal trends or patterns in data, such as identifying which category has the highest or
#lowest values or changes over time.

#Easy Interpretation: Bar plots are easy to interpret, making them useful for conveying information to a wide audience,
#including those who may not have a strong background in data analysis.

#Now, let's create a bar plot and a horizontal bar plot using the provided data:
import numpy as np
import matplotlib.pyplot as plt

company = np.array(["Apple", "Microsoft", "Google", "AMD"])
profit = np.array([3000, 8000, 1000, 10000])

# Create a vertical bar plot
plt.figure(figsize=(8, 6))
plt.bar(company, profit, color='blue')
plt.title('Company Profits')
plt.xlabel('Company')
plt.ylabel('Profit ($)')
plt.show()

# Create a horizontal bar plot
plt.figure(figsize=(8, 6))
plt.barh(company, profit, color='green')
plt.title('Company Profits')
plt.xlabel('Profit ($)')
plt.ylabel('Company')
plt.show()

#Question.5 What is a box plot? Why is it used? Using the following data plot a box plot.
#box1 = np.random.normal(100, 10, 200)
#box2 = np.random.normal(90, 20, 200)
#Answer.5 A box plot, also known as a box-and-whisker plot, is a graphical representation of the distribution of a dataset.
#It displays summary statistics such as the median, quartiles, and potential outliers. A box plot consists of a box that represents
#the interquartile range (IQR), which contains the middle 50% of the data, and "whiskers" that extend from the box to indicate the
#range of the data. Outliers, if present, are often shown as individual points outside the whiskers

#Box plots are used for several purposes:

#Visualizing Distribution: Box plots provide a visual summary of the central tendency, spread, and skewness of a dataset.
#They help you understand the distribution of your data at a glance.

#Comparing Distributions: Box plots are useful for comparing the distributions of multiple datasets side by side. This helps
#identify differences in medians, spreads, and potential outliers.

#Identifying Outliers: Box plots are effective in identifying potential outliers in a dataset, which are data points that deviate
#significantly from the rest of the data.

#Detecting Skewness: Box plots can reveal the skewness of a distribution. Skewed distributions have longer tails on one side,
#which affects the shape of the box plot.

#Visualizing Spread: The length of the whiskers in a box plot provides insight into the variability or spread of the data. Longer
#whiskers indicate higher variability.

#Now, let's create a box plot using the provided data:

import numpy as np
import matplotlib.pyplot as plt

box1 = np.random.normal(100, 10, 200)
box2 = np.random.normal(90, 20, 200)

# Combine the data into a list for plotting
data = [box1, box2]

# Create a box plot
plt.figure(figsize=(8, 6))
plt.boxplot(data, labels=['Box 1', 'Box 2'])
plt.title('Box Plot of Two Distributions')
plt.xlabel('Boxes')
plt.ylabel('Values')
plt.show()