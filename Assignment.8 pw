{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "63bd43e2-74b2-4f1a-91a0-34fb3fbbcd2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.1 What is an Exception in python ? Write the difference between Exceptions and Syntax errors ?\n",
    "#Answer.1  In Python, an exception is an error that occurs during the execution of a program. When a statement or\n",
    "#expression in Python encounters an error, it raises an exception, which can then be handled by the program to prevent it \n",
    "#from crashing or to perform alternative actions.\n",
    "\n",
    "#Exceptions are raised for various reasons, such as when a function receives invalid arguments, when an operation is\n",
    "#performed on incompatible data types, or when a file cannot be found, among others. Python provides a range of built-in \n",
    "#exceptions, such as ValueError, TypeError, FileNotFoundError, and ZeroDivisionError, to name a few. Additionally, it's \n",
    "#possible to create custom exceptions by deriving them from the base Exception class.\n",
    "\n",
    "#Syntax errors, on the other hand, are a different type of error in Python. They occur when the Python interpreter encounters\n",
    "#code that violates the language's syntax rules. Syntax errors are typically caused by typos, missing or misplaced punctuation,\n",
    "#or incorrect indentation. These errors prevent the code from being executed at all and must be fixed before the program can\n",
    "#run.\n",
    "\n",
    "#To summarize the difference between exceptions and syntax errors:\n",
    "\n",
    "#Exceptions: Exceptions occur during the execution of a program when an error condition arises. They can be handled by the\n",
    "#program using exception handling mechanisms like try-except blocks. Exceptions are typically caused by logical or runtime\n",
    "#errors in the code.\n",
    "\n",
    "#Syntax errors: Syntax errors occur before the code is executed when the Python interpreter encounters code that violates\n",
    "#the language's syntax rules. They prevent the program from running and must be fixed by correcting the syntax of the code.\n",
    "\n",
    "#In summary, exceptions are runtime errors that occur during program execution, while syntax errors are mistakes in the \n",
    "#code's syntax that prevent the program from running at all."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3afdb4c5-f47f-41d6-bcc8-2501df60d9af",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Question.2 What happens when an exception is not handled ? Explain with an example .\n",
    "#Answer. 2  When an exception is not handled in Python, it leads to a program termination and an error message called\n",
    "#a traceback is displayed. The traceback provides information about the exception that occurred, including the type of\n",
    "#exception, the line number where it occurred, and the sequence of function calls that led to the exception.\n",
    "\n",
    "#Example : \n",
    "#def divide_numbers(a, b):\n",
    "    #result = a / b\n",
    "    #return result\n",
    "\n",
    "#num1 = 10\n",
    "#num2 = 0\n",
    "\n",
    "#result = divide_numbers(num1, num2)\n",
    "#print(\"Result:\", result)\n",
    "\n",
    "#In this example, the divide_numbers() function is defined to perform division between two numbers. However, the code \n",
    "#attempts to divide num1 by num2, where num2 is zero.\n",
    "\n",
    "#When this code is executed, it will raise a ZeroDivisionError because dividing a number by zero is mathematically \n",
    "#undefined. Since the exception is not handled in the code, the program terminates and displays a traceback:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b3e42801-df79-4606-bd94-6c19858b4536",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error: Division by zero is not allowed!\n",
      "Result: None\n"
     ]
    }
   ],
   "source": [
    "#Question.3  Which Python statements are used to catch and handle exceptions ? Explain with an example \n",
    "#Answer.3  In Python, the try-except statement is used to catch and handle exceptions. The try block contains the code\n",
    "#that may raise an exception, and the except block specifies the code to be executed if a specific exception occurs.\n",
    "\n",
    "#Example : \n",
    "\n",
    "def divide_numbers(a, b):\n",
    "    try:\n",
    "        result = a / b\n",
    "        return result\n",
    "    except ZeroDivisionError:\n",
    "        print(\"Error: Division by zero is not allowed!\")\n",
    "\n",
    "num1 = 10\n",
    "num2 = 0\n",
    "\n",
    "result = divide_numbers(num1, num2)\n",
    "print(\"Result:\", result)\n",
    "\n",
    "#In this example, the divide_numbers() function performs division between two numbers. The try block contains the code that\n",
    "#may raise an exception, which is the division operation a / b. If a ZeroDivisionError occurs during the execution of the try\n",
    "#block (i.e., if b is zero), the exception will be caught by the except block.\n",
    "\n",
    "#The except block specifies the code to be executed when a specific exception occurs. In this case, the except \n",
    "#ZeroDivisionError block will be executed if a ZeroDivisionError is raised. Inside the except block, we print an error \n",
    "#message stating that division by zero is not allowed.\n",
    "\n",
    "#When this code is executed, and a division by zero occurs, the program will not terminate abruptly. Instead, the except \n",
    "#block will handle the exception and print the error message.\n",
    "\n",
    "#By using the try-except statement, we can catch specific exceptions, handle them appropriately, and prevent the program from\n",
    "#crashing due to unhandled exceptions. Additionally, it allows us to gracefully handle error conditions and perform alternative\n",
    "#actions when exceptions occur."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5a933ccc-0c69-4a83-ac27-b215e76d1a9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The division was successful. Result: 5.0\n",
      "Error: Division by zero is not allowed!\n",
      "Finally block executed\n",
      "Invalid age: Age cannot be greater than 120\n"
     ]
    }
   ],
   "source": [
    "#Question.4 Explain with an example : \n",
    "#a. try and else : \n",
    "#Answer.a In Python, the try-except-else statement is used  not only to to catch and handle exceptions, but also to specify code that\n",
    "#should be executed if no exceptions occur within the try block. The else block is optional and follows the except block(s)\n",
    "#in a try-except-else statement.\n",
    "\n",
    "#Example : \n",
    "\n",
    "def divide_numbers(a, b):\n",
    "    try:\n",
    "        result = a / b\n",
    "    except ZeroDivisionError:\n",
    "        print(\"Error: Division by zero is not allowed!\")\n",
    "    else:\n",
    "        print(\"The division was successful. Result:\", result)\n",
    "\n",
    "num1 = 10\n",
    "num2 = 2\n",
    "\n",
    "divide_numbers(num1, num2)\n",
    "\n",
    "#no exception occurs in the try block , hence ,the else block will be executed. The else block prints a \n",
    "#success message along with the result of the division.\n",
    "\n",
    "#b. finally :\n",
    "#Answer.b In Python, the finally block is used in conjunction with the try-except statement to specify code that should be \n",
    "#executed regardless of whether an exception occurred or not. The finally block is optional and follows the try and except\n",
    "#block(s) in a try-except-finally statement.\n",
    "\n",
    "#Example : \n",
    "\n",
    "def divide_numbers(a, b):\n",
    "    try:\n",
    "        result = a / b\n",
    "        print(\"Result:\", result)\n",
    "        # return from the program within the try block\n",
    "        return 1\n",
    "    except ZeroDivisionError:\n",
    "        print(\"Error: Division by zero is not allowed!\")\n",
    "        # return from the program within the except block\n",
    "        return 2\n",
    "    finally:\n",
    "        print(\"Finally block executed\")\n",
    "\n",
    "num1 = 10\n",
    "num2 = 0\n",
    "\n",
    "divide_numbers(num1, num2)\n",
    "\n",
    "# In this program , in both try and except  blocks , control  will return  from the function at the end , BUT regardless of it , finally will \n",
    "#always be executed before the control returned .\n",
    "\n",
    "#c. raise : \n",
    "#Answer.c In Python, the raise keyword is used to explicitly raise an exception. It allows you to create and raise your\n",
    "#own exceptions or propagate built-in exceptions to handle them in an appropriate manner.\n",
    "\n",
    "#Example : \n",
    "\n",
    "def validate_age(age):\n",
    "    if age < 0:\n",
    "        raise ValueError(\"Age cannot be negative\")\n",
    "    elif age > 120:\n",
    "        raise ValueError(\"Age cannot be greater than 120\")\n",
    "    else:\n",
    "        print(\"Age is valid\")\n",
    "\n",
    "try:\n",
    "    age = 199\n",
    "    validate_age(age)\n",
    "except ValueError as err:\n",
    "    print(\"Invalid age:\", err)\n",
    "#In this example, we have a validate_age() function that checks whether an age is valid or not. If the age is less than 0,\n",
    "#it raises a ValueError with a custom error message indicating that the age cannot be negative. Similarly, if the age is\n",
    "#greater than 120, it raises a ValueError with a message indicating that the age cannot be greater than 120. Otherwise, if \n",
    "#the age is valid, it prints a message indicating that the age is valid."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "27400302-c8e1-4d1d-9d85-e6649d16a24f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PaymentError occurred: Invalid payment amount\n"
     ]
    }
   ],
   "source": [
    "#Question.5  What are Custom Exceptions in python ? Why do we need Custom Exception ? Explain with an example \n",
    "#Answer.5    Custom exceptions in Python are user-defined exceptions that extend the built-in exception classes or the base\n",
    "#Exception class. They allow you to define your own specific exceptions tailored to your application's needs. Custom exceptions\n",
    "#can provide more meaningful error messages and enable better exception handling in your code.\n",
    "\n",
    "#We need custom exceptions in Python for several reasons:\n",
    "\n",
    "#Specificity: Custom exceptions allow you to create exceptions that are specific to your application or domain. By defining \n",
    "#custom exception classes, you can convey the exact nature of the error or exceptional condition occurring in your code.\n",
    "\n",
    "#Readability and Maintainability: Custom exceptions make your code more readable and maintainable by providing descriptive\n",
    "#names for specific error scenarios. They improve the clarity of your code and help other developers understand the intent and\n",
    "#potential issues within your codebase.\n",
    "\n",
    "#Granular Exception Handling: With custom exceptions, you can handle different types of exceptions differently. It allows you\n",
    "#to catch specific exceptions and handle them in a more specialized manner. This helps in providing appropriate error messages,\n",
    "#performing specific actions, or taking recovery steps based on the specific exception raised.\n",
    "\n",
    "#Example : \n",
    "\n",
    "class PaymentError(Exception):\n",
    "    pass\n",
    "\n",
    "def make_payment(amount):\n",
    "    if amount <= 0:\n",
    "        raise PaymentError(\"Invalid payment amount\")\n",
    "    else:\n",
    "        print(\"Payment successful\")\n",
    "\n",
    "try:\n",
    "    payment_amount = -35\n",
    "    make_payment(payment_amount)\n",
    "except PaymentError as err:\n",
    "    print(\"PaymentError occurred:\", err)\n",
    "\n",
    "#In this example, we define a custom exception called PaymentError. It represents an error that occurs during the payment \n",
    "#process.\n",
    "\n",
    "#The make_payment() function takes an amount as input and checks if the amount is greater than zero. If the amount is \n",
    "#invalid (zero or negative), it raises the PaymentError exception with an appropriate error message. Otherwise, it prints a \n",
    "#success message indicating a successful payment.\n",
    "\n",
    "#In the try block, we passed  the pyment_amount  to the make_payment() function.\n",
    "\n",
    "#If the payment amount is invalid, the PaymentError is raised and caught in the except block. The error message, indicating\n",
    "#an invalid payment amount, is printed.    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "db82ea6f-b786-4e0e-a152-06fb134f8015",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CustomException occurred: Cannot divide by zero\n"
     ]
    }
   ],
   "source": [
    "#Question.6 Create a custom exception class , Use this class to handle an exception .\n",
    "#Answer.6  : \n",
    "class CustomException(Exception):\n",
    "    def __init__(self, message):\n",
    "        self.message = message\n",
    "        super().__init__(self.message)\n",
    "\n",
    "def divide_numbers(a, b):\n",
    "    if b == 0:\n",
    "        raise CustomException(\"Cannot divide by zero\")\n",
    "    else:\n",
    "        return a / b\n",
    "\n",
    "try:\n",
    "    num1 = 150\n",
    "    num2 = 0\n",
    "    result = divide_numbers(num1, num2)\n",
    "    print(\"Result:\", result)\n",
    "except CustomException as err:\n",
    "    print(\"CustomException occurred:\", err)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
